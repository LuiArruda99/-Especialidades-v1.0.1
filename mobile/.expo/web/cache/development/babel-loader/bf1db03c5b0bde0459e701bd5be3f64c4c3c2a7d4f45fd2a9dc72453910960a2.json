{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType } from \"react-native-web/dist/index\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from \"./decorateMapComponent\";\nimport MapView from \"./MapView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  coordinates: PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  })),\n  holes: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }))),\n  onPress: PropTypes.func,\n  tappable: PropTypes.bool,\n  strokeWidth: PropTypes.number,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  zIndex: PropTypes.number,\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  geodesic: PropTypes.bool,\n  lineDashPhase: PropTypes.number,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number)\n});\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\nvar MapPolygon = function (_React$Component) {\n  _inherits(MapPolygon, _React$Component);\n  var _super = _createSuper(MapPolygon);\n  function MapPolygon() {\n    _classCallCheck(this, MapPolygon);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MapPolygon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.polygon.setNativeProps(props);\n    }\n  }, {\n    key: \"updateNativeProps\",\n    value: function updateNativeProps() {\n      var _this = this;\n      return function () {\n        var _this$props = _this.props,\n          fillColor = _this$props.fillColor,\n          strokeColor = _this$props.strokeColor,\n          strokeWidth = _this$props.strokeWidth;\n        var polygonNativeProps = {};\n        if (fillColor) {\n          polygonNativeProps.fillColor = fillColor;\n        }\n        if (strokeColor) {\n          polygonNativeProps.strokeColor = strokeColor;\n        }\n        if (strokeWidth) {\n          polygonNativeProps.strokeWidth = strokeWidth;\n        }\n        if (polygonNativeProps) {\n          _this.setNativeProps(polygonNativeProps);\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var AIRMapPolygon = this.getAirComponent();\n      return _jsx(AIRMapPolygon, _objectSpread(_objectSpread({}, this.props), {}, {\n        ref: function ref(_ref) {\n          _this2.polygon = _ref;\n        },\n        onLayout: this.context.provider === MapView.PROVIDER_GOOGLE ? this.updateNativeProps() : undefined\n      }));\n    }\n  }]);\n  return MapPolygon;\n}(React.Component);\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\nexport default decorateMapComponent(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"names":["PropTypes","React","ColorPropType","ViewPropTypes","View","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","MapView","jsx","_jsx","viewPropTypes","propTypes","_objectSpread","coordinates","arrayOf","shape","latitude","number","isRequired","longitude","holes","onPress","func","tappable","bool","strokeWidth","strokeColor","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolygon","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","setNativeProps","props","polygon","updateNativeProps","_this","_this$props","polygonNativeProps","render","_this2","AIRMapPolygon","getAirComponent","ref","onLayout","context","provider","PROVIDER_GOOGLE","undefined","Component","componentType","providers","google","ios","android"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/react-native-maps/lib/components/MapPolygon.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\nimport MapView from './MapView';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * An array of coordinates to describe the polygon\n   */\n  coordinates: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * Latitude/Longitude coordinates\n       */\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n    })\n  ),\n\n  /**\n   * An array of array of coordinates to describe the polygon holes\n   */\n  holes: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Latitude/Longitude coordinates\n         */\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n      })\n    )\n  ),\n\n  /**\n   * Callback that is called when the user presses on the polygon\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Boolean to allow a polygon to be tappable and use the\n   * onPress function\n   */\n  tappable: PropTypes.bool,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\n   * a sphere.\n   *\n   */\n  geodesic: PropTypes.bool,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapPolygon extends React.Component {\n  setNativeProps(props) {\n    this.polygon.setNativeProps(props);\n  }\n\n  updateNativeProps() {\n    return () => {\n      const { fillColor, strokeColor, strokeWidth } = this.props;\n      let polygonNativeProps = {};\n      if (fillColor) {\n        polygonNativeProps.fillColor = fillColor;\n      }\n      if (strokeColor) {\n        polygonNativeProps.strokeColor = strokeColor;\n      }\n      if (strokeWidth) {\n        polygonNativeProps.strokeWidth = strokeWidth;\n      }\n      if (polygonNativeProps) {\n        this.setNativeProps(polygonNativeProps);\n      }\n    };\n  }\n\n  render() {\n    const AIRMapPolygon = this.getAirComponent();\n    return (\n      <AIRMapPolygon\n        {...this.props}\n        ref={ref => {\n          this.polygon = ref;\n        }}\n        onLayout={\n          this.context.provider === MapView.PROVIDER_GOOGLE\n            ? this.updateNativeProps()\n            : undefined\n        }\n      />\n    );\n  }\n}\n\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}