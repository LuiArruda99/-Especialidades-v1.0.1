{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref3 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref3.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref4) {\n      var route = _ref4.route,\n        height = _ref4.height;\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref6) {\n      var route = _ref6.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    var _Dimensions$get = Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n      var _ref7 = focusedOptions.safeAreaInsets || {},\n        _ref7$top = _ref7.top,\n        top = _ref7$top === void 0 ? insets.top : _ref7$top,\n        _ref7$right = _ref7.right,\n        right = _ref7$right === void 0 ? insets.right : _ref7$right,\n        _ref7$bottom = _ref7.bottom,\n        bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,\n        _ref7$left = _ref7.left,\n        left = _ref7$left === void 0 ? insets.left : _ref7$left;\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n        var isFloatHeaderAbsolute = headerMode === 'float' ? _this2.state.scenes.slice(-2).some(function (scene) {\n          var descriptor = scene.descriptor;\n          var options = descriptor ? descriptor.options : {};\n          var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? isParentHeaderShown === false : _options$headerShown;\n          if (headerTransparent || headerShown === false) {\n            return true;\n          }\n          return false;\n        }) : false;\n        var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n          key: \"header\"\n        }, renderHeader({\n          mode: 'float',\n          layout: layout,\n          insets: {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left\n          },\n          scenes: scenes,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          onContentHeightChange: _this2.handleHeaderLayout,\n          gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n          styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n          style: [styles.floating, isFloatHeaderAbsolute && styles.absolute]\n        })) : null;\n        return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n          enabled: isScreensEnabled,\n          style: styles.container,\n          onLayout: _this2.handleLayout\n        }, routes.map(function (route, index, self) {\n          var focused = focusedRoute.key === route.key;\n          var gesture = gestures[route.key];\n          var scene = scenes[index];\n          var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n          var _ref8 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref8.safeAreaInsets,\n            _ref8$headerShown = _ref8.headerShown,\n            headerShown = _ref8$headerShown === void 0 ? isParentHeaderShown === false : _ref8$headerShown,\n            headerTransparent = _ref8.headerTransparent,\n            cardShadowEnabled = _ref8.cardShadowEnabled,\n            cardOverlayEnabled = _ref8.cardOverlayEnabled,\n            cardOverlay = _ref8.cardOverlay,\n            cardStyle = _ref8.cardStyle,\n            animationEnabled = _ref8.animationEnabled,\n            gestureResponseDistance = _ref8.gestureResponseDistance,\n            gestureVelocityImpact = _ref8.gestureVelocityImpact,\n            _ref8$gestureDirectio = _ref8.gestureDirection,\n            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n            _ref8$transitionSpec = _ref8.transitionSpec,\n            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n          var transitionConfig = {\n            gestureDirection: gestureDirection,\n            transitionSpec: transitionSpec,\n            cardStyleInterpolator: cardStyleInterpolator,\n            headerStyleInterpolator: headerStyleInterpolator\n          };\n          if (index !== self.length - 1) {\n            var nextScene = scenes[index + 1];\n            if (nextScene) {\n              var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref9.animationEnabled,\n                _ref9$gestureDirectio = _ref9.gestureDirection,\n                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,\n                _ref9$transitionSpec = _ref9.transitionSpec,\n                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,\n                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,\n                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;\n              transitionConfig = {\n                gestureDirection: _gestureDirection,\n                transitionSpec: _transitionSpec,\n                cardStyleInterpolator: _cardStyleInterpolator,\n                headerStyleInterpolator: _headerStyleInterpolator\n              };\n            }\n          }\n          var _ref10 = safeAreaInsets || {},\n            _ref10$top = _ref10.top,\n            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,\n            _ref10$right = _ref10.right,\n            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,\n            _ref10$bottom = _ref10.bottom,\n            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,\n            _ref10$left = _ref10.left,\n            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;\n          var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n          return React.createElement(MaybeScreen, {\n            key: route.key,\n            style: StyleSheet.absoluteFill,\n            enabled: isScreensEnabled,\n            active: isScreenActive,\n            pointerEvents: \"box-none\"\n          }, React.createElement(CardContainer, _extends({\n            index: index,\n            active: index === self.length - 1,\n            focused: focused,\n            closing: closingRouteKeys.includes(route.key),\n            layout: layout,\n            gesture: gesture,\n            scene: scene,\n            safeAreaInsetTop: safeAreaInsetTop,\n            safeAreaInsetRight: safeAreaInsetRight,\n            safeAreaInsetBottom: safeAreaInsetBottom,\n            safeAreaInsetLeft: safeAreaInsetLeft,\n            cardOverlay: cardOverlay,\n            cardOverlayEnabled: cardOverlayEnabled,\n            cardShadowEnabled: cardShadowEnabled,\n            cardStyle: cardStyle,\n            onPageChangeStart: onPageChangeStart,\n            onPageChangeConfirm: onPageChangeConfirm,\n            onPageChangeCancel: onPageChangeCancel,\n            onGestureStart: onGestureStart,\n            onGestureCancel: onGestureCancel,\n            onGestureEnd: onGestureEnd,\n            gestureResponseDistance: gestureResponseDistance,\n            headerHeight: headerHeight,\n            onHeaderHeightChange: _this2.handleHeaderLayout,\n            getPreviousScene: _this2.getPreviousScene,\n            getFocusedRoute: _this2.getFocusedRoute,\n            mode: mode,\n            headerMode: headerMode,\n            headerShown: headerShown,\n            hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n            renderHeader: renderHeader,\n            renderScene: renderScene,\n            onOpenRoute: onOpenRoute,\n            onCloseRoute: onCloseRoute,\n            onTransitionStart: onTransitionStart,\n            onTransitionEnd: onTransitionEnd,\n            gestureEnabled: index !== 0 && getGesturesEnabled({\n              route: route\n            }),\n            gestureVelocityImpact: gestureVelocityImpact\n          }, transitionConfig)));\n        })), isFloatHeaderAbsolute ? floatingHeader : null);\n      });\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","HeaderShownContext","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","_ref","key","_ref$options","style","flatten","headerStyle","height","safeAreaInsets","_objectSpread","_options$headerStatus","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","_ref2","_ref2$gestureDirectio","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits","_super","_createSuper","_createClass","value","getDerivedStateFromProps","props","state","gestures","_ref3","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","_props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","e","_e$nativeEvent$layout","nativeEvent","setState","_ref4","_ref5","previousHeight","_defineProperty2","_ref6","getPreviousRoute","previousScene","find","_Dimensions$get","get","_Dimensions$get$heigh","_height","_Dimensions$get$width","_width","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","_this$state","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","_ref7","_ref7$top","_ref7$right","right","_ref7$bottom","bottom","_ref7$left","left","isScreensEnabled","OS","createElement","Consumer","isParentHeaderShown","isFloatHeaderAbsolute","slice","some","headerTransparent","_options$headerShown","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","enabled","container","onLayout","handleLayout","focused","isScreenActive","extrapolate","_ref8","_ref8$headerShown","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","_ref8$gestureDirectio","_ref8$transitionSpec","transitionSpec","_ref8$cardStyleInterp","cardStyleInterpolator","_ref8$headerStyleInte","transitionConfig","length","nextScene","_ref9","_ref9$gestureDirectio","_ref9$transitionSpec","_ref9$cardStyleInterp","_ref9$headerStyleInte","_ref10","_ref10$top","safeAreaInsetTop","_ref10$right","safeAreaInsetRight","_ref10$bottom","safeAreaInsetBottom","_ref10$left","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","_extends","closing","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","Component","default","create","flex","position","zIndex"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousScene: this.getPreviousScene,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        onGestureStart={onGestureStart}\n                        onGestureCancel={onGestureCancel}\n                        onGestureEnd={onGestureEnd}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousScene={this.getPreviousScene}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAWA,SAASC,oBAAT,EAA+BC,WAA/B;AACA,SAASC,sBAAT;AAEA,OAAOC,aAAP;AACA,SACEC,iBADF,EAEEC,eAFF;AAIA,SAASC,cAAc,IAAIC,oBAA3B;AACA,SAASD,cAAc,IAAIE,kBAA3B;AACA,OAAOC,kBAAP;AACA,OAAOC,uBAAP;AAsDA,IAAMC,OAAO,GAAG,IAAhB;AAEA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc;EAAEC,OAAO,EAAE;AAAX,CAAd,CAA5B;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBC,MADuB,EAEvBC,MAFuB,EAGvBC,WAHuB,EAIvBC,MAJuB,EAKvBC,QALuB,EAMpB;EACH,OAAOJ,MAAM,CAACK,MAAP,CAAsC,UAACC,GAAD,EAAMC,IAAN,EAAe;IAAA,IAAAC,IAAA,GACjCN,WAAW,CAACK,IAAI,CAACE,GAAN,CAAX,IAAyB,EAAlD;MAAAC,YAAA,GAAAF,IAAA,CAAQV,OAAO;MAAPA,OAAO,GAAAY,YAAA,cAAG,KAAAA,YAAA;IAClB,IAAMC,KAAU,GAAG/B,UAAU,CAACgC,OAAX,CAAmBd,OAAO,CAACe,WAAR,IAAuB,EAA1C,CAAnB;IAEA,IAAMC,MAAM,GACV,OAAOH,KAAK,CAACG,MAAb,KAAwB,QAAxB,GAAmCH,KAAK,CAACG,MAAzC,GAAkDV,QAAQ,CAACG,IAAI,CAACE,GAAN,CAD5D;IAGA,IAAMM,cAAc,GAAAC,aAAA,CAAAA,aAAA,KACff,MADkB,GAElBH,OAAO,CAACiB,cAAA,CAFb;IAAA,IAAAE,qBAAA,GAKuDnB,OAAvD,CAAQoB,qBAAqB;MAArBA,qBAAqB,GAAAD,qBAAA,cAAGF,cAAc,CAACI,GAAA,GAAAF,qBAAA;IAE/CX,GAAG,CAACC,IAAI,CAACE,GAAN,CAAH,GACE,OAAOK,MAAP,KAAkB,QAAlB,GACIA,MADJ,GAEI7B,sBAAsB,CAACkB,MAAD,EAASe,qBAAT,CAH5B;IAKA,OAAOZ,GAAP;EACD,CApBM,EAoBJ,EApBI,CAAP;AAqBD,CA5BD;AA8BA,IAAMc,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAC1BC,IAD6B,EAE7BlB,MAF6B,EAG7BmB,UAH6B,EAI1B;EAAA,IAAAC,KAAA,GAKC,CAAAD,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAExB,OAAZ,KAAuB,EAJ3B;IAAA0B,qBAAA,GAAAD,KAAA,CACEE,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAGH,IAAI,KAAK,OAAT,GACfjC,eAAe,CAACqC,gBADD,GAEftC,iBAAiB,CAACsC,gBAAA,GAAAD,qBAAA;EAGxB,OAAO/B,uBAAuB,CAACU,MAAD,EAASsB,gBAAT,CAA9B;AACD,CAZD;AAcA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAC1BL,IAD6B,EAE7BM,OAF6B,EAG7BxB,MAH6B,EAI7BmB,UAJ6B,EAK1B;EACH,IAAMM,QAAQ,GAAGR,sBAAsB,CACrCC,IADqC,EAErC;IAGEQ,KAAK,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY5B,MAAM,CAAC0B,KAAnB,CAHT;IAIEf,MAAM,EAAEgB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY5B,MAAM,CAACW,MAAnB;EAJV,CAFqC,EAQrCQ,UARqC,CAAvC;EAWA,IAAIM,QAAQ,GAAG,CAAf,EAAkB;IAChB,OAAOD,OAAO,CAACK,WAAR,CAAoB;MACzBC,UAAU,EAAE,CAAC,CAAD,EAAIL,QAAJ,CADa;MAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFY,CAApB,CAAP;EAID;EAED,OAAOP,OAAO,CAACK,WAAR,CAAoB;IACzBC,UAAU,EAAE,CAACL,QAAD,EAAW,CAAX,CADa;IAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;EAFY,CAApB,CAAP;AAID,CA5BD;AAAA,IA8BqBC,SAAN,aAAAC,gBAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EAAAK,YAAA,CAAAL,SAAA;IAAA1B,GAAA;IAAAgC,KAAA,WAAAC,yBACmBC,KAAhC,EAA8CC,KAA9C,EAA4D;MAC1D,IACED,KAAK,CAAC3C,MAAN,KAAiB4C,KAAK,CAAC5C,MAAvB,IACA2C,KAAK,CAACzC,WAAN,KAAsB0C,KAAK,CAAC1C,WAF9B,EAGE;QACA,OAAO,IAAP;MACD;MAED,IAAM2C,QAAQ,GAAGF,KAAK,CAAC3C,MAAN,CAAaK,MAAb,CAAmC,UAACC,GAAD,EAAMC,IAAN,EAAe;QACjE,IAAMe,UAAU,GAAGqB,KAAK,CAACzC,WAAN,CAAkBK,IAAI,CAACE,GAAvB,CAAnB;QAAA,IAAAqC,KAAA,GAC6B,CAAAxB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAExB,OAAZ,KAAuB,EAApD;UAAQiD,gBAAA,GAAAD,KAAA,CAAAC,gBAAA;QAERzC,GAAG,CAACC,IAAI,CAACE,GAAN,CAAH,GACEmC,KAAK,CAACC,QAAN,CAAetC,IAAI,CAACE,GAApB,KACA,IAAI9B,QAAQ,CAACqE,KAAb,CACEL,KAAK,CAACM,gBAAN,CAAuBC,QAAvB,CAAgC3C,IAAI,CAACE,GAArC,KACAsC,gBAAgB,KAAK,KADrB,GAEI3B,sBAAsB,CAACuB,KAAK,CAACtB,IAAP,EAAauB,KAAK,CAACzC,MAAnB,EAA2BmB,UAA3B,CAF1B,GAGI,CAJN,CAFF;QASA,OAAOhB,GAAP;MACD,CAdgB,EAcd,EAdc,CAAjB;MAgBA,OAAO;QACLN,MAAM,EAAE2C,KAAK,CAAC3C,MADT;QAELmD,MAAM,EAAER,KAAK,CAAC3C,MAAN,CAAaoD,GAAb,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAwB;UAC/C,IAAMC,aAAa,GAAGD,IAAI,CAACD,KAAK,GAAG,CAAT,CAA1B;UACA,IAAMG,SAAS,GAAGF,IAAI,CAACD,KAAK,GAAG,CAAT,CAAtB;UAEA,IAAMI,QAAQ,GAAGd,KAAK,CAACO,MAAN,CAAaG,KAAb,CAAjB;UAEA,IAAMK,cAAc,GAAGd,QAAQ,CAACQ,KAAK,CAAC5C,GAAP,CAA/B;UACA,IAAMmD,eAAe,GAAGJ,aAAa,GACjCX,QAAQ,CAACW,aAAa,CAAC/C,GAAf,CADyB,GAEjCoD,SAFJ;UAGA,IAAMC,WAAW,GAAGL,SAAS,GAAGZ,QAAQ,CAACY,SAAS,CAAChD,GAAX,CAAX,GAA6BoD,SAA1D;UAEA,IAAMvC,UAAU,GACdqB,KAAK,CAACzC,WAAN,CAAkBmD,KAAK,CAAC5C,GAAxB,KACAmC,KAAK,CAAC1C,WAAN,CAAkBmD,KAAK,CAAC5C,GAAxB,CADA,KAECiD,QAAQ,GAAGA,QAAQ,CAACpC,UAAZ,GAAyB3B,mBAFlC,CADF;UAKA,IAAMoE,cAAc,GAClBpB,KAAK,CAACzC,WAAN,CAAkBuD,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEhD,GAA7B,KACAmC,KAAK,CAAC1C,WAAN,CAAkBuD,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEhD,GAA7B,CAFF;UAIA,IAAMuD,kBAAkB,GACtBrB,KAAK,CAACzC,WAAN,CAAkBsD,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAE/C,GAAjC,KACAmC,KAAK,CAAC1C,WAAN,CAAkBsD,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAE/C,GAAjC,CAFF;UAIA,IAAMwD,KAAK,GAAG;YACZZ,KADY,EACZA,KADY;YAEZ/B,UAFY,EAEZA,UAFY;YAGZ4C,QAAQ,EAAE;cACRC,OAAO,EAAEzC,sBAAsB,CAC7BiB,KAAK,CAACtB,IADuB,EAE7BsC,cAF6B,EAG7Bf,KAAK,CAACzC,MAHuB,EAI7BmB,UAJ6B,CADvB;cAOR8C,IAAI,EAAEN,WAAW,GACbpC,sBAAsB,CACpBiB,KAAK,CAACtB,IADc,EAEpByC,WAFoB,EAGpBlB,KAAK,CAACzC,MAHc,EAIpB4D,cAJoB,CADT,GAObF,SAdI;cAeRzD,QAAQ,EAAEwD,eAAe,GACrBlC,sBAAsB,CACpBiB,KAAK,CAACtB,IADc,EAEpBuC,eAFoB,EAGpBhB,KAAK,CAACzC,MAHc,EAIpB6D,kBAJoB,CADD,GAOrBH;YAtBI,CAHE;YA2BZQ,MAAM,EAAE,CACNhB,KADM,EAENT,KAAK,CAACzC,MAFA,EAGNmB,UAHM,EAINyC,cAJM,EAKNC,kBALM,EAMNL,cANM,EAONG,WAPM,EAQNF,eARM;UA3BI,CAAd;UAuCA,IACEF,QAAQ,IACRO,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,UAACC,EAAD,EAAKC,CAAL,EAAW;YAE5B,OAAOd,QAAQ,CAACW,MAAT,CAAgBG,CAAhB,MAAuBD,EAA9B;UACD,CAHD,CAFF,EAME;YACA,OAAOb,QAAP;UACD;UAED,OAAOO,KAAP;QACD,CA3EO,CAFH;QA8ELpB,QA9EK,EA8ELA,QA9EK;QA+EL3C,WAAW,EAAEyC,KAAK,CAACzC,WA/Ed;QAgFLuE,aAAa,EAAE1E,gBAAgB,CAC7B4C,KAAK,CAAC3C,MADuB,EAE7B2C,KAAK,CAAC1C,MAFuB,EAG7B2C,KAAK,CAAC1C,WAHuB,EAI7B0C,KAAK,CAACzC,MAJuB,EAK7ByC,KAAK,CAAC6B,aALuB;MAhF1B,CAAP;IAwFD;EAAA;EAED,SAAAtC,UAAYuC,MAAD,EAAe;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAzC,SAAA;IACxBwC,KAAA,GAAArC,MAAA,CAAAuC,IAAA,OAAMH,MAAN;IADwBI,eAAA,CAAAC,sBAAA,CAAAJ,KAAA,mBAoBF,UAAAK,CAAD,EAA0B;MAAA,IAAAC,qBAAA,GACrBD,CAAC,CAACE,WAAF,CAAc/E,MAAxC;QAAQW,MAAF,GAAAmE,qBAAA,CAAEnE,MAAF;QAAUe,KAAA,GAAAoD,qBAAA,CAAApD,KAAA;MAEhB,IAAM1B,MAAM,GAAG;QAAE0B,KAAF,EAAEA,KAAF;QAASf,MAAA,EAAAA;MAAT,CAAf;MAEA6D,KAAA,CAAKQ,QAAL,CAAc,UAACvC,KAAD,EAAQD,KAAR,EAAkB;QAC9B,IAAI7B,MAAM,KAAK8B,KAAK,CAACzC,MAAN,CAAaW,MAAxB,IAAkCe,KAAK,KAAKe,KAAK,CAACzC,MAAN,CAAa0B,KAA7D,EAAoE;UAClE,OAAO,IAAP;QACD;QAED,OAAO;UACL1B,MADK,EACLA,MADK;UAELsE,aAAa,EAAE1E,gBAAgB,CAC7B4C,KAAK,CAAC3C,MADuB,EAE7B2C,KAAK,CAAC1C,MAFuB,EAG7B2C,KAAK,CAAC1C,WAHuB,EAI7BC,MAJ6B,EAK7ByC,KAAK,CAAC6B,aALuB;QAF1B,CAAP;MAUD,CAfD;IAgBD,CAzCyB;IAAAK,eAAA,CAAAC,sBAAA,CAAAJ,KAAA,yBA2CG,UAAAS,KAAA,EAMvB;MAAA,IALJ/B,KAD4B,GAAA+B,KAAA,CAC5B/B,KAD4B;QAE5BvC,MAAA,GAAAsE,KAAA,CAAAtE,MAAA;MAKA6D,KAAA,CAAKQ,QAAL,CAAc,UAAAE,KAAA,EAAuB;QAAA,IAApBZ,aAAA,GAAAY,KAAA,CAAAZ,aAAA;QACf,IAAMa,cAAc,GAAGb,aAAa,CAACpB,KAAK,CAAC5C,GAAP,CAApC;QAEA,IAAI6E,cAAc,KAAKxE,MAAvB,EAA+B;UAC7B,OAAO,IAAP;QACD;QAED,OAAO;UACL2D,aAAa,EAAAzD,aAAA,CAAAA,aAAA,KACRyD,aADU,OAAAc,gBAAA,KAEZlC,KAAK,CAAC5C,GAAP,EAAaK,MAAA;QAHV,CAAP;MAMD,CAbD;IAcD,CAhEyB;IAAAgE,eAAA,CAAAC,sBAAA,CAAAJ,KAAA,sBAkEA,YAAM;MAAA,IACtB/B,KAAA,GAAU+B,KAAA,CAAKhC,KAAvB,CAAQC,KAAA;MAER,OAAOA,KAAK,CAAC5C,MAAN,CAAa4C,KAAK,CAACU,KAAnB,CAAP;IACD,CAtEyB;IAAAwB,eAAA,CAAAC,sBAAA,CAAAJ,KAAA,uBAwEC,UAAAa,KAAA,EAAyC;MAAA,IAAtCnC,KAAA,GAAAmC,KAAA,CAAAnC,KAAA;MAAA,IACpBoC,gBAAA,GAAqBd,KAAA,CAAKhC,KAAlC,CAAQ8C,gBAAA;MAAA,IACAtC,MAAA,GAAWwB,KAAA,CAAK/B,KAAxB,CAAQO,MAAA;MAER,IAAMK,aAAa,GAAGiC,gBAAgB,CAAC;QAAEpC,KAAA,EAAAA;MAAF,CAAD,CAAtC;MAEA,IAAIG,aAAJ,EAAmB;QACjB,IAAMkC,aAAa,GAAGvC,MAAM,CAACwC,IAAP,CACnB,UAAA1B,KAAD;UAAA,OAAWA,KAAK,CAACZ,KAAN,CAAY5C,GAAZ,KAAoB+C,aAAa,CAAC/C,GADzB;QAAA,EAAtB;QAIA,OAAOiF,aAAP;MACD;MAED,OAAO7B,SAAP;IACD,CAvFyB;IAAA,IAAA+B,eAAA,GAGU/G,UAAU,CAACgH,GAAX,CAAe,QAAf,CAAlC;MAAAC,qBAAA,GAAAF,eAAA,CAAQ9E,MAAM;MAANiF,OAAM,GAAAD,qBAAA,cAAG,CAAX,GAAAA,qBAAA;MAAAE,qBAAA,GAAAJ,eAAA,CAAc/D,KAAK;MAALoE,MAAK,GAAAD,qBAAA,cAAG,IAAAA,qBAAA;IAE5BrB,KAAA,CAAK/B,KAAL,GAAa;MACX5C,MAAM,EAAE,EADG;MAEXmD,MAAM,EAAE,EAFG;MAGXN,QAAQ,EAAE,EAHC;MAIX1C,MAAM,EAAE;QAAEW,MAAM,EAANiF,OAAF;QAAUlE,KAAK,EAALoE;MAAV,CAJG;MAKX/F,WAAW,EAAEyE,KAAA,CAAKhC,KAAL,CAAWzC,WALb;MAWXuE,aAAa,EAAE;IAXJ,CAAb;IAAA,OAAAE,KAAA;EAaD;EAAAnC,YAAA,CAAAL,SAAA;IAAA1B,GAAA;IAAAgC,KAAA,WAAAyD,OAAA,EAuEQ;MAAA,IAAAC,MAAA;MAAA,IAAAC,WAAA,GAsBH,KAAKzD,KArBT;QACEtB,IADI,GAAA+E,WAAA,CACJ/E,IADI;QAEJpB,MAFI,GAAAmG,WAAA,CAEJnG,MAFI;QAGJC,WAHI,GAAAkG,WAAA,CAGJlG,WAHI;QAIJ0C,KAJI,GAAAwD,WAAA,CAIJxD,KAJI;QAKJ5C,MALI,GAAAoG,WAAA,CAKJpG,MALI;QAMJqG,gBANI,GAAAD,WAAA,CAMJC,gBANI;QAOJC,WAPI,GAAAF,WAAA,CAOJE,WAPI;QAQJC,YARI,GAAAH,WAAA,CAQJG,YARI;QASJC,kBATI,GAAAJ,WAAA,CASJI,kBATI;QAUJC,YAVI,GAAAL,WAAA,CAUJK,YAVI;QAWJC,WAXI,GAAAN,WAAA,CAWJM,WAXI;QAYJC,UAZI,GAAAP,WAAA,CAYJO,UAZI;QAaJC,iBAbI,GAAAR,WAAA,CAaJQ,iBAbI;QAcJC,eAdI,GAAAT,WAAA,CAcJS,eAdI;QAeJC,iBAfI,GAAAV,WAAA,CAeJU,iBAfI;QAgBJC,mBAhBI,GAAAX,WAAA,CAgBJW,mBAhBI;QAiBJC,kBAjBI,GAAAZ,WAAA,CAiBJY,kBAjBI;QAkBJC,cAlBI,GAAAb,WAAA,CAkBJa,cAlBI;QAmBJC,YAnBI,GAAAd,WAAA,CAmBJc,YAnBI;QAoBJC,eAAA,GAAAf,WAAA,CAAAe,eAAA;MAAA,IAAAC,WAAA,GAGkD,KAAKxE,KAAzD;QAAQO,MAAF,GAAAiE,WAAA,CAAEjE,MAAF;QAAUhD,MAAV,GAAAiH,WAAA,CAAUjH,MAAV;QAAkB0C,QAAlB,GAAAuE,WAAA,CAAkBvE,QAAlB;QAA4B4B,aAAA,GAAA2C,WAAA,CAAA3C,aAAA;MAElC,IAAM4C,YAAY,GAAGzE,KAAK,CAAC5C,MAAN,CAAa4C,KAAK,CAACU,KAAnB,CAArB;MACA,IAAMgE,iBAAiB,GAAGpH,WAAW,CAACmH,YAAY,CAAC5G,GAAd,CAArC;MACA,IAAM8G,cAAc,GAAGD,iBAAiB,GAAGA,iBAAiB,CAACxH,OAArB,GAA+B,EAAvE;MAEA,IAAI0H,uBAAuB,GACzBnG,IAAI,KAAK,OAAT,GAAmBjC,eAAnB,GAAqCD,iBADvC;MAGA,IAAIwH,UAAU,KAAK,QAAnB,EAA6B;QAC3Ba,uBAAuB,GAAAxG,aAAA,CAAAA,aAAA,KAClBwG,uBADqB;UAExBC,uBAAuB,EAAEnI;QAAA,EAF3B;MAID;MAAA,IAAAoI,KAAA,GAOGH,cAAc,CAACxG,cAAf,IAAiC,EALrC;QAAA4G,SAAA,GAAAD,KAAA,CACEvG,GAAG;QAAHA,GAAG,GAAAwG,SAAA,cAAG1H,MAAM,CAACkB,GADT,GAAAwG,SAAA;QAAAC,WAAA,GAAAF,KAAA,CAEJG,KAAK;QAALA,KAAK,GAAAD,WAAA,cAAG3H,MAAM,CAAC4H,KAFX,GAAAD,WAAA;QAAAE,YAAA,GAAAJ,KAAA,CAGJK,MAAM;QAANA,MAAM,GAAAD,YAAA,cAAG7H,MAAM,CAAC8H,MAHZ,GAAAD,YAAA;QAAAE,UAAA,GAAAN,KAAA,CAIJO,IAAI;QAAJA,IAAI,GAAAD,UAAA,cAAG/H,MAAM,CAACgI,IAAA,GAAAD,UAAA;MAKhB,IAAME,gBAAgB,GAAGpJ,QAAQ,CAACqJ,EAAT,KAAgB,KAAhB,IAAyB9G,IAAI,KAAK,OAA3D;MAEA,OACE3C,KAAA,CAAA0J,aAAA,CAAC5I,kBAAD,CAAoB6I,QAApB,QACI,UAAAC,mBAAD,EAAyB;QACxB,IAAMC,qBAAqB,GACzB5B,UAAU,KAAK,OAAf,GACIR,MAAA,CAAKvD,KAAL,CAAWO,MAAX,CAAkBqF,KAAlB,CAAwB,CAAC,CAAzB,EAA4BC,IAA5B,CAAkC,UAAAxE,KAAD,EAAW;UAAA,IAClC3C,UAAA,GAAe2C,KAAvB,CAAQ3C,UAAA;UACR,IAAMxB,OAAO,GAAGwB,UAAU,GAAGA,UAAU,CAACxB,OAAd,GAAwB,EAAlD;UAAA,IAEE4I,iBADI,GAGF5I,OAHJ,CACE4I,iBADI;YAAAC,oBAAA,GAGF7I,OAHJ,CAEE8I,WAAW;YAAXA,WAAW,GAAAD,oBAAA,cAAGL,mBAAmB,KAAK,QAAAK,oBAAA;UAGxC,IAAID,iBAAiB,IAAIE,WAAW,KAAK,KAAzC,EAAgD;YAC9C,OAAO,IAAP;UACD;UAED,OAAO,KAAP;QACD,CAbD,CADJ,GAeI,KAhBN;QAkBA,IAAMC,cAAc,GAClBlC,UAAU,KAAK,OAAf,GACEjI,KAAA,CAAA0J,aAAA,CAAC1J,KAAD,CAAOoK,QAAP;UAAgBrI,GAAG,EAAC;QAApB,GACGgG,YAAY,CAAC;UACZpF,IAAI,EAAE,OADM;UAEZlB,MAFY,EAEZA,MAFY;UAGZF,MAAM,EAAE;YAAEkB,GAAF,EAAEA,GAAF;YAAO0G,KAAP,EAAOA,KAAP;YAAcE,MAAd,EAAcA,MAAd;YAAsBE,IAAA,EAAAA;UAAtB,CAHI;UAIZ9E,MAJY,EAIZA,MAJY;UAKZ4F,gBAAgB,EAAE5C,MAAA,CAAK4C,gBALX;UAMZC,eAAe,EAAE7C,MAAA,CAAK6C,eANV;UAOZC,qBAAqB,EAAE9C,MAAA,CAAK+C,kBAPhB;UAQZzH,gBAAgB,EACd8F,cAAc,CAAC9F,gBAAf,KAAoCoC,SAApC,GACI0D,cAAc,CAAC9F,gBADnB,GAEI+F,uBAAuB,CAAC/F,gBAXlB;UAYZ0H,iBAAiB,EACf5B,cAAc,CAACE,uBAAf,KAA2C5D,SAA3C,GACI0D,cAAc,CAACE,uBADnB,GAEID,uBAAuB,CAACC,uBAflB;UAgBZ9G,KAAK,EAAE,CACLyI,MAAM,CAACC,QADF,EAELd,qBAAqB,IAAIa,MAAM,CAACE,QAF3B;QAhBK,CAAD,CADf,CADF,GAwBI,IAzBN;QA2BA,OACE5K,KAAA,CAAA0J,aAAA,CAAC1J,KAAD,CAAOoK,QAAP,QACGP,qBAAqB,GAAG,IAAH,GAAUM,cADlC,EAEEnK,KAAA,CAAA0J,aAAA,CAACrJ,oBAAD;UACEwK,OAAO,EAAErB,gBADX;UAEEvH,KAAK,EAAEyI,MAAM,CAACI,SAFhB;UAGEC,QAAQ,EAAEtD,MAAA,CAAKuD;QAHjB,GAKG1J,MAAM,CAACoD,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAwB;UAClC,IAAMoG,OAAO,GAAGtC,YAAY,CAAC5G,GAAb,KAAqB4C,KAAK,CAAC5C,GAA3C;UACA,IAAMkB,OAAO,GAAGkB,QAAQ,CAACQ,KAAK,CAAC5C,GAAP,CAAxB;UACA,IAAMwD,KAAK,GAAGd,MAAM,CAACG,KAAD,CAApB;UAEA,IAAMsG,cAAc,GAAG3F,KAAK,CAACC,QAAN,CAAeE,IAAf,GACnBH,KAAK,CAACC,QAAN,CAAeE,IAAf,CAAoBpC,WAApB,CAAgC;YAC9BC,UAAU,EAAE,CAAC,CAAD,EAAI,IAAIvC,OAAR,EAAiB,CAAjB,CADkB;YAE9BwC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFiB;YAG9B2H,WAAW,EAAE;UAHiB,CAAhC,CADmB,GAMnB,CANJ;UAAA,IAAAC,KAAA,GAyBI7F,KAAK,CAAC3C,UAAN,GACA2C,KAAK,CAAC3C,UAAN,CAAiBxB,OADjB,GAEC,EAnBL;YACEiB,cADI,GAAA+I,KAAA,CACJ/I,cADI;YAAAgJ,iBAAA,GAAAD,KAAA,CAEJlB,WAAW;YAAXA,WAAW,GAAAmB,iBAAA,cAAGzB,mBAAmB,KAAK,KAFlC,GAAAyB,iBAAA;YAGJrB,iBAHI,GAAAoB,KAAA,CAGJpB,iBAHI;YAIJsB,iBAJI,GAAAF,KAAA,CAIJE,iBAJI;YAKJC,kBALI,GAAAH,KAAA,CAKJG,kBALI;YAMJC,WANI,GAAAJ,KAAA,CAMJI,WANI;YAOJC,SAPI,GAAAL,KAAA,CAOJK,SAPI;YAQJpH,gBARI,GAAA+G,KAAA,CAQJ/G,gBARI;YASJqH,uBATI,GAAAN,KAAA,CASJM,uBATI;YAUJC,qBAVI,GAAAP,KAAA,CAUJO,qBAVI;YAAAC,qBAAA,GAAAR,KAAA,CAWJrI,gBAAgB;YAAhBA,gBAAgB,GAAA6I,qBAAA,cAAG9C,uBAAuB,CAAC/F,gBAXvC,GAAA6I,qBAAA;YAAAC,oBAAA,GAAAT,KAAA,CAYJU,cAAc;YAAdA,cAAc,GAAAD,oBAAA,cAAG/C,uBAAuB,CAACgD,cAZrC,GAAAD,oBAAA;YAAAE,qBAAA,GAAAX,KAAA,CAaJY,qBAAqB;YAArBA,qBAAqB,GAAAD,qBAAA,cAAG1H,gBAAgB,KAAK,KAArB,GACpBxD,kBADoB,GAEpBiI,uBAAuB,CAACkD,qBAfxB,GAAAD,qBAAA;YAAAE,qBAAA,GAAAb,KAAA,CAgBJrC,uBAAuB;YAAvBA,uBAAuB,GAAAkD,qBAAA,cAAGnD,uBAAuB,CAACC,uBAAA,GAAAkD,qBAAA;UAKpD,IAAIC,gBAAgB,GAAG;YACrBnJ,gBADqB,EACrBA,gBADqB;YAErB+I,cAFqB,EAErBA,cAFqB;YAGrBE,qBAHqB,EAGrBA,qBAHqB;YAIrBjD,uBAAA,EAAAA;UAJqB,CAAvB;UAaA,IAAInE,KAAK,KAAKC,IAAI,CAACsH,MAAL,GAAc,CAA5B,EAA+B;YAC7B,IAAMC,SAAS,GAAG3H,MAAM,CAACG,KAAK,GAAG,CAAT,CAAxB;YAEA,IAAIwH,SAAJ,EAAe;cAAA,IAAAC,KAAA,GASTD,SAAS,CAACxJ,UAAV,GACAwJ,SAAS,CAACxJ,UAAV,CAAqBxB,OADrB,GAEC,EAVL;gBACEiD,iBADI,GAAAgI,KAAA,CACJhI,gBADI;gBAAAiI,qBAAA,GAAAD,KAAA,CAEJtJ,gBAAgB;gBAAhBA,iBAAgB,GAAAuJ,qBAAA,cAAGxD,uBAAuB,CAAC/F,gBAFvC,GAAAuJ,qBAAA;gBAAAC,oBAAA,GAAAF,KAAA,CAGJP,cAAc;gBAAdA,eAAc,GAAAS,oBAAA,cAAGzD,uBAAuB,CAACgD,cAHrC,GAAAS,oBAAA;gBAAAC,qBAAA,GAAAH,KAAA,CAIJL,qBAAqB;gBAArBA,sBAAqB,GAAAQ,qBAAA,cAAGnI,iBAAgB,KAAK,KAArB,GACpBxD,kBADoB,GAEpBiI,uBAAuB,CAACkD,qBANxB,GAAAQ,qBAAA;gBAAAC,qBAAA,GAAAJ,KAAA,CAOJtD,uBAAuB;gBAAvBA,wBAAuB,GAAA0D,qBAAA,cAAG3D,uBAAuB,CAACC,uBAAA,GAAA0D,qBAAA;cAKpDP,gBAAgB,GAAG;gBACjBnJ,gBADiB,EACjBA,iBADiB;gBAEjB+I,cAFiB,EAEjBA,eAFiB;gBAGjBE,qBAHiB,EAGjBA,sBAHiB;gBAIjBjD,uBAAA,EAAAA;cAJiB,CAAnB;YAMD;UACF;UAAA,IAAA2D,MAAA,GAOGrK,cAAc,IAAI,EALtB;YAAAsK,UAAA,GAAAD,MAAA,CACEjK,GAAG;YAAEmK,gBAAgB,GAAAD,UAAA,cAAGpL,MAAM,CAACkB,GAD3B,GAAAkK,UAAA;YAAAE,YAAA,GAAAH,MAAA,CAEJvD,KAAK;YAAE2D,kBAAkB,GAAAD,YAAA,cAAGtL,MAAM,CAAC4H,KAF/B,GAAA0D,YAAA;YAAAE,aAAA,GAAAL,MAAA,CAGJrD,MAAM;YAAE2D,mBAAmB,GAAAD,aAAA,cAAGxL,MAAM,CAAC8H,MAHjC,GAAA0D,aAAA;YAAAE,WAAA,GAAAP,MAAA,CAIJnD,IAAI;YAAE2D,iBAAiB,GAAAD,WAAA,cAAG1L,MAAM,CAACgI,IAAA,GAAA0D,WAAA;UAGnC,IAAME,YAAY,GAChBlF,UAAU,KAAK,MAAf,IAAyBiC,WAAW,KAAK,KAAzC,GACInE,aAAa,CAACpB,KAAK,CAAC5C,GAAP,CADjB,GAEI,CAHN;UAKA,OACE/B,KAAA,CAAA0J,aAAA,CAACpJ,WAAD;YACEyB,GAAG,EAAE4C,KAAK,CAAC5C,GADb;YAEEE,KAAK,EAAE/B,UAAU,CAACkN,YAFpB;YAGEvC,OAAO,EAAErB,gBAHX;YAIE6D,MAAM,EAAEnC,cAJV;YAKEoC,aAAa,EAAC;UALhB,GAOEtN,KAAA,CAAA0J,aAAA,CAAClJ,aAAD,EAAA+M,QAAA;YACE3I,KAAK,EAAEA,KADT;YAEEyI,MAAM,EAAEzI,KAAK,KAAKC,IAAI,CAACsH,MAAL,GAAc,CAFlC;YAGElB,OAAO,EAAEA,OAHX;YAIEuC,OAAO,EAAE7F,gBAAgB,CAACnD,QAAjB,CAA0BG,KAAK,CAAC5C,GAAhC,CAJX;YAKEN,MAAM,EAAEA,MALV;YAMEwB,OAAO,EAAEA,OANX;YAOEsC,KAAK,EAAEA,KAPT;YAQEqH,gBAAgB,EAAEA,gBARpB;YASEE,kBAAkB,EAAEA,kBATtB;YAUEE,mBAAmB,EAAEA,mBAVvB;YAWEE,iBAAiB,EAAEA,iBAXrB;YAYE1B,WAAW,EAAEA,WAZf;YAaED,kBAAkB,EAAEA,kBAbtB;YAcED,iBAAiB,EAAEA,iBAdrB;YAeEG,SAAS,EAAEA,SAfb;YAgBErD,iBAAiB,EAAEA,iBAhBrB;YAiBEC,mBAAmB,EAAEA,mBAjBvB;YAkBEC,kBAAkB,EAAEA,kBAlBtB;YAmBEC,cAAc,EAAEA,cAnBlB;YAoBEE,eAAe,EAAEA,eApBnB;YAqBED,YAAY,EAAEA,YArBhB;YAsBEkD,uBAAuB,EAAEA,uBAtB3B;YAuBEyB,YAAY,EAAEA,YAvBhB;YAwBEM,oBAAoB,EAAEhG,MAAA,CAAK+C,kBAxB7B;YAyBEH,gBAAgB,EAAE5C,MAAA,CAAK4C,gBAzBzB;YA0BEC,eAAe,EAAE7C,MAAA,CAAK6C,eA1BxB;YA2BE3H,IAAI,EAAEA,IA3BR;YA4BEsF,UAAU,EAAEA,UA5Bd;YA6BEiC,WAAW,EAAEA,WA7Bf;YA8BEwD,iBAAiB,EACf7D,qBAAqB,IAAI,CAACG,iBA/B9B;YAiCEjC,YAAY,EAAEA,YAjChB;YAkCEC,WAAW,EAAEA,WAlCf;YAmCEJ,WAAW,EAAEA,WAnCf;YAoCEC,YAAY,EAAEA,YApChB;YAqCEK,iBAAiB,EAAEA,iBArCrB;YAsCEC,eAAe,EAAEA,eAtCnB;YAuCEwF,cAAc,EACZ/I,KAAK,KAAK,CAAV,IAAekD,kBAAkB,CAAC;cAAEnD,KAAA,EAAAA;YAAF,CAAD,CAxCrC;YA0CEgH,qBAAqB,EAAEA;UA1CzB,GA2CMO,gBA3CN,EAPF,CADF;QAuDD,CA3IA,CALH,CAFF,EAoJGrC,qBAAqB,GAAGM,cAAH,GAAoB,IApJ5C,CADF;MAwJD,CAvMH,CADF;IA2MD;EAAA;EAAA,OAAA1G,SAAA;AAAA,EA1coCzD,KAAK,CAAC4N,SAA9B;AAAA,SAAMnK,SAAN,IAAAoK,OAAA;AA6cf,IAAMnD,MAAM,GAAGxK,UAAU,CAAC4N,MAAX,CAAkB;EAC/BhD,SAAS,EAAE;IACTiD,IAAI,EAAE;EADG,CADoB;EAI/BnD,QAAQ,EAAE;IACRoD,QAAQ,EAAE,UADF;IAERvL,GAAG,EAAE,CAFG;IAGR8G,IAAI,EAAE,CAHE;IAIRJ,KAAK,EAAE;EAJC,CAJqB;EAU/BwB,QAAQ,EAAE;IACRsD,MAAM,EAAE;EADA;AAVqB,CAAlB,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}