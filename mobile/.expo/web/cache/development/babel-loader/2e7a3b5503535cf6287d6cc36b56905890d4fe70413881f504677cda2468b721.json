{"ast":null,"code":"/** @license React v1.4.1\n * use-subscription.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var _assign = require('object-assign');\n    var react = require('react');\n    function useSubscription(_ref) {\n      var getCurrentValue = _ref.getCurrentValue,\n        subscribe = _ref.subscribe;\n      var _useState = react.useState(function () {\n          return {\n            getCurrentValue: getCurrentValue,\n            subscribe: subscribe,\n            value: getCurrentValue()\n          };\n        }),\n        state = _useState[0],\n        setState = _useState[1];\n      var valueToReturn = state.value;\n      if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n          getCurrentValue: getCurrentValue,\n          subscribe: subscribe,\n          value: valueToReturn\n        });\n      }\n      react.useDebugValue(valueToReturn);\n      react.useEffect(function () {\n        var didUnsubscribe = false;\n        var checkForUpdates = function checkForUpdates() {\n          if (didUnsubscribe) {\n            return;\n          }\n          var value = getCurrentValue();\n          setState(function (prevState) {\n            if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n              return prevState;\n            }\n            if (prevState.value === value) {\n              return prevState;\n            }\n            return _assign({}, prevState, {\n              value: value\n            });\n          });\n        };\n        var unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return function () {\n          didUnsubscribe = true;\n          unsubscribe();\n        };\n      }, [getCurrentValue, subscribe]);\n      return valueToReturn;\n    }\n    exports.useSubscription = useSubscription;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","_assign","require","react","useSubscription","_ref","getCurrentValue","subscribe","_useState","useState","value","state","setState","valueToReturn","useDebugValue","useEffect","didUnsubscribe","checkForUpdates","prevState","unsubscribe","exports"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/@react-navigation/core/node_modules/use-subscription/cjs/use-subscription.development.js"],"sourcesContent":["/** @license React v1.4.1\n * use-subscription.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\nvar react = require('react');\n\n//\n// In order to avoid removing and re-adding subscriptions each time this hook is called,\n// the parameters passed to this hook should be memoized in some wayâ€“\n// either by wrapping the entire params object with useMemo()\n// or by wrapping the individual callbacks with useCallback().\n\nfunction useSubscription(_ref) {\n  var getCurrentValue = _ref.getCurrentValue,\n      subscribe = _ref.subscribe;\n\n  // Read the current value from our subscription.\n  // When this value changes, we'll schedule an update with React.\n  // It's important to also store the hook params so that we can check for staleness.\n  // (See the comment in checkForUpdates() below for more info.)\n  var _useState = react.useState(function () {\n    return {\n      getCurrentValue: getCurrentValue,\n      subscribe: subscribe,\n      value: getCurrentValue()\n    };\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var valueToReturn = state.value; // If parameters have changed since our last render, schedule an update with its current value.\n\n  if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n    // If the subscription has been updated, we'll schedule another update with React.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    valueToReturn = getCurrentValue();\n    setState({\n      getCurrentValue: getCurrentValue,\n      subscribe: subscribe,\n      value: valueToReturn\n    });\n  } // Display the current value for this hook in React DevTools.\n\n\n  react.useDebugValue(valueToReturn); // It is important not to subscribe while rendering because this can lead to memory leaks.\n  // (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n  // Instead, we wait until the commit phase to attach our handler.\n  //\n  // We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n  // so that we don't stretch the commit phase.\n  // This also has an added benefit when multiple components are subscribed to the same source:\n  // It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n  // (Learn more at https://codesandbox.io/s/k0yvr5970o)\n\n  react.useEffect(function () {\n    var didUnsubscribe = false;\n\n    var checkForUpdates = function () {\n      // It's possible that this callback will be invoked even after being unsubscribed,\n      // if it's removed as a result of a subscription event/update.\n      // In this case, React will log a DEV warning about an update from an unmounted component.\n      // We can avoid triggering that warning with this check.\n      if (didUnsubscribe) {\n        return;\n      } // We use a state updater function to avoid scheduling work for a stale source.\n      // However it's important to eagerly read the currently value,\n      // so that all scheduled work shares the same value (in the event of multiple subscriptions).\n      // This avoids visual \"tearing\" when a mutation happens during a (concurrent) render.\n\n\n      var value = getCurrentValue();\n      setState(function (prevState) {\n        // Ignore values from stale sources!\n        // Since we subscribe an unsubscribe in a passive effect,\n        // it's possible that this callback will be invoked for a stale (previous) subscription.\n        // This check avoids scheduling an update for that stale subscription.\n        if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n          return prevState;\n        } // Some subscriptions will auto-invoke the handler, even if the value hasn't changed.\n        // If the value hasn't changed, no update is needed.\n        // Return state as-is so React can bail out and avoid an unnecessary render.\n\n\n        if (prevState.value === value) {\n          return prevState;\n        }\n\n        return _assign({}, prevState, {\n          value: value\n        });\n      });\n    };\n\n    var unsubscribe = subscribe(checkForUpdates); // Because we're subscribing in a passive effect,\n    // it's possible that an update has occurred between render and our effect handler.\n    // Check for this and schedule an update if work has occurred.\n\n    checkForUpdates();\n    return function () {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [getCurrentValue, subscribe]); // Return the current value for our caller to use while rendering.\n\n  return valueToReturn;\n}\n\nexports.useSubscription = useSubscription;\n  })();\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAIZ,IAAIA,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC,CAAC,YAAW;IACd,YAAY;;IAEZ,IAAIC,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;IACtC,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;IAQ5B,SAASE,eAAeA,CAACC,IAAI,EAAE;MAC7B,IAAIC,eAAe,GAAGD,IAAI,CAACC,eAAe;QACtCC,SAAS,GAAGF,IAAI,CAACE,SAAS;MAM9B,IAAIC,SAAS,GAAGL,KAAK,CAACM,QAAQ,CAAC,YAAY;UACzC,OAAO;YACLH,eAAe,EAAEA,eAAe;YAChCC,SAAS,EAAEA,SAAS;YACpBG,KAAK,EAAEJ,eAAe;UACxB,CAAC;QACH,CAAC,CAAC;QACEK,KAAK,GAAGH,SAAS,CAAC,CAAC,CAAC;QACpBI,QAAQ,GAAGJ,SAAS,CAAC,CAAC,CAAC;MAE3B,IAAIK,aAAa,GAAGF,KAAK,CAACD,KAAK;MAE/B,IAAIC,KAAK,CAACL,eAAe,KAAKA,eAAe,IAAIK,KAAK,CAACJ,SAAS,KAAKA,SAAS,EAAE;QAI9EM,aAAa,GAAGP,eAAe,EAAE;QACjCM,QAAQ,CAAC;UACPN,eAAe,EAAEA,eAAe;UAChCC,SAAS,EAAEA,SAAS;UACpBG,KAAK,EAAEG;QACT,CAAC,CAAC;MACJ;MAGAV,KAAK,CAACW,aAAa,CAACD,aAAa,CAAC;MAUlCV,KAAK,CAACY,SAAS,CAAC,YAAY;QAC1B,IAAIC,cAAc,GAAG,KAAK;QAE1B,IAAIC,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAe;UAKhC,IAAID,cAAc,EAAE;YAClB;UACF;UAMA,IAAIN,KAAK,GAAGJ,eAAe,EAAE;UAC7BM,QAAQ,CAAC,UAAUM,SAAS,EAAE;YAK5B,IAAIA,SAAS,CAACZ,eAAe,KAAKA,eAAe,IAAIY,SAAS,CAACX,SAAS,KAAKA,SAAS,EAAE;cACtF,OAAOW,SAAS;YAClB;YAKA,IAAIA,SAAS,CAACR,KAAK,KAAKA,KAAK,EAAE;cAC7B,OAAOQ,SAAS;YAClB;YAEA,OAAOjB,OAAO,CAAC,CAAC,CAAC,EAAEiB,SAAS,EAAE;cAC5BR,KAAK,EAAEA;YACT,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC;QAED,IAAIS,WAAW,GAAGZ,SAAS,CAACU,eAAe,CAAC;QAI5CA,eAAe,EAAE;QACjB,OAAO,YAAY;UACjBD,cAAc,GAAG,IAAI;UACrBG,WAAW,EAAE;QACf,CAAC;MACH,CAAC,EAAE,CAACb,eAAe,EAAEC,SAAS,CAAC,CAAC;MAEhC,OAAOM,aAAa;IACtB;IAEAO,OAAO,CAAChB,eAAe,GAAGA,eAAe;EACvC,CAAC,GAAG;AACN"},"metadata":{},"sourceType":"script","externalDependencies":[]}