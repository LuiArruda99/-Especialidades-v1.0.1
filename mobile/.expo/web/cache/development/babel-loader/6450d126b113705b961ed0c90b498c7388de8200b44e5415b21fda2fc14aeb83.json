{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useFocusEffect(effect) {\n  var navigation = useNavigation();\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n    var callback = function callback() {\n      var destroy = effect();\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        var message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n        if (destroy === null) {\n          message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + '};\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += \" You returned: '\".concat(JSON.stringify(destroy), \"'\");\n        }\n        console.error(message);\n      }\n    };\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"names":["React","useNavigation","useFocusEffect","effect","navigation","useEffect","isFocused","cleanup","callback","destroy","undefined","process","env","NODE_ENV","message","then","concat","JSON","stringify","console","error","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/@react-navigation/core/lib/module/useFocusEffect.tsx"],"sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            '};\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned: '${JSON.stringify(destroy)}'`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP;AAWA,eAAe,SAASC,cAATA,CAAwBC,MAAxB,EAAgD;EAC7D,IAAMC,UAAU,GAAGH,aAAa,EAAhC;EAEAD,KAAK,CAACK,SAAN,CAAgB,YAAM;IACpB,IAAIC,SAAS,GAAG,KAAhB;IACA,IAAIC,OAAJ;IAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;MACrB,IAAMC,OAAO,GAAGN,MAAM,EAAtB;MAEA,IAAIM,OAAO,KAAKC,SAAZ,IAAyB,OAAOD,OAAP,KAAmB,UAAhD,EAA4D;QAC1D,OAAOA,OAAP;MACD;MAED,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACzC,IAAIC,OAAO,GACT,6FADF;QAGA,IAAIL,OAAO,KAAK,IAAhB,EAAsB;UACpBK,OAAO,IACL,kGADF;QAED,CAHD,MAGO,IAAI,OAAQL,OAAD,CAAiBM,IAAxB,KAAiC,UAArC,EAAiD;UACtDD,OAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,8BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdF;QAeD,CAhBM,MAgBA;UACLA,OAAO,uBAAAE,MAAA,CAAuBC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAvB,MAAP;QACD;QAEDU,OAAO,CAACC,KAAR,CAAcN,OAAd;MACD;IACF,CApCD;IAuCA,IAAIV,UAAU,CAACE,SAAX,EAAJ,EAA4B;MAC1BC,OAAO,GAAGC,QAAQ,EAAlB;MACAF,SAAS,GAAG,IAAZ;IACD;IAED,IAAMe,gBAAgB,GAAGjB,UAAU,CAACkB,WAAX,CAAuB,OAAvB,EAAgC,YAAM;MAG7D,IAAIhB,SAAJ,EAAe;QACb;MACD;MAED,IAAIC,OAAO,KAAKG,SAAhB,EAA2B;QACzBH,OAAO;MACR;MAEDA,OAAO,GAAGC,QAAQ,EAAlB;MACAF,SAAS,GAAG,IAAZ;IACD,CAbwB,CAAzB;IAeA,IAAMiB,eAAe,GAAGnB,UAAU,CAACkB,WAAX,CAAuB,MAAvB,EAA+B,YAAM;MAC3D,IAAIf,OAAO,KAAKG,SAAhB,EAA2B;QACzBH,OAAO;MACR;MAEDA,OAAO,GAAGG,SAAV;MACAJ,SAAS,GAAG,KAAZ;IACD,CAPuB,CAAxB;IASA,OAAO,YAAM;MACX,IAAIC,OAAO,KAAKG,SAAhB,EAA2B;QACzBH,OAAO;MACR;MAEDc,gBAAgB;MAChBE,eAAe;IAChB,CAPD;EAQD,CAhFD,EAgFG,CAACpB,MAAD,EAASC,UAAT,CAhFH;AAiFD"},"metadata":{},"sourceType":"module","externalDependencies":[]}