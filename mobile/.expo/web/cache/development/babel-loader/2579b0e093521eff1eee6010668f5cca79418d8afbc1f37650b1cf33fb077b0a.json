{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props, context) {\n    var _this;\n    _classCallCheck(this, DrawerLayout);\n    _this = _super.call(this, _props, context);\n    _this._accessibilityIsModalView = React.createRef();\n    _this._pointerEventsView = React.createRef();\n    _this._panGestureHandler = React.createRef();\n    _this._drawerShown = false;\n    _this._updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      _this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    };\n    _this._handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    _this._emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n    _this._openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this._emitStateChanged(DRAGGING, false);\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    _this._onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this._drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n    _this._handleRelease = function (nativeEvent) {\n      var _this$props = _this.props,\n        drawerWidth = _this$props.drawerWidth,\n        drawerPosition = _this$props.drawerPosition,\n        drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    _this._updateShowing = function (showing) {\n      _this._drawerShown = showing;\n      _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n        drawerPosition = _this$props2.drawerPosition,\n        minSwipeDistance = _this$props2.minSwipeDistance,\n        edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    _this._animateDrawer = function (fromValue, toValue, velocity) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this._updateShowing(willShow);\n      _this._emitStateChanged(SETTLING, willShow);\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }).start(function (_ref4) {\n        var finished = _ref4.finished;\n        if (finished) {\n          _this._emitStateChanged(IDLE, willShow);\n          if (willShow) {\n            _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose && _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    _this._renderOverlay = function () {\n      invariant(_this._openValue, 'should be set');\n      var overlayOpacity = _this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return _jsx(TapGestureHandler, {\n        onHandlerStateChange: _this._onTapHandlerStateChange,\n        children: _jsx(Animated.View, {\n          pointerEvents: _this._drawerShown ? 'auto' : 'none',\n          ref: _this._pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    _this._renderDrawer = function () {\n      var _this$props3 = _this.props,\n        drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n        drawerWidth = _this$props3.drawerWidth,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        drawerContainerStyle = _this$props3.drawerContainerStyle,\n        contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return _jsxs(Animated.View, {\n        style: styles.main,\n        onLayout: _this._handleContainerLayout,\n        children: [_jsxs(Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: _this._drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()]\n        }), _jsx(Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: _this._accessibilityIsModalView,\n          accessibilityViewIsModal: _this._drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: _jsx(View, {\n            style: dynamicDrawerStyles,\n            children: _this.props.renderNavigationView(_this._openValue)\n          })\n        })]\n      });\n    };\n    _this._setPanGestureRef = function (ref) {\n      _this._panGestureHandler.current = ref;\n      _this.props.onGestureRef && _this.props.onGestureRef(ref);\n    };\n    var _dragX = new Animated.Value(0);\n    var _touchX = new Animated.Value(0);\n    var _drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n    _this._updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerLockMode = _this$props4.drawerLockMode,\n        edgeWidth = _this$props4.edgeWidth,\n        minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      };\n      return _jsx(PanGestureHandler, {\n        ref: this._setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._openingHandlerStateChange,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this._renderDrawer()\n      });\n    }\n  }]);\n  return DrawerLayout;\n}(Component);\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked'\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nexport { DrawerLayout as default };\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_Component","_inherits","_super","_createSuper","props","context","_this","_classCallCheck","call","_accessibilityIsModalView","createRef","_pointerEventsView","_panGestureHandler","_drawerShown","_updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","_handleContainerLayout","_ref","setState","layout","width","_emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","_openingHandlerStateChange","_ref2","oldState","ACTIVE","_handleRelease","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","_onTapHandlerStateChange","_ref3","drawerLockMode","closeDrawer","_this$props","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","_updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","_this$props2","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","bounciness","start","_ref4","finished","onDrawerOpen","onDrawerClose","openDrawer","options","arguments","length","forceUpdate","_renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onHandlerStateChange","children","ref","style","styles","overlay","_renderDrawer","_this$props3","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","containerOnBack","containerInFront","importantForAccessibility","drawerContainer","renderNavigationView","_setPanGestureRef","onGestureRef","_createClass","key","value","UNSAFE_componentWillUpdate","render","_this$props4","failOffsetY","onGestureEvent","enabled","defaultProps","positions","Left","Right","default","create","_objectSpread","absoluteFillObject","zIndex","flex","overflow"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/react-native-gesture-handler/DrawerLayout.js"],"sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function,\n\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number,\n};\n\nexport type EventType = {\n  stopPropagation: Function,\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number,\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n  _openValue: ?Animated.Interpolation;\n  _onGestureEvent: ?Animated.Event;\n  _accessibilityIsModalView = React.createRef();\n  _pointerEventsView = React.createRef();\n  _panGestureHandler = React.createRef();\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\n      {\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }\n    );\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing,\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none',\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this._updateShowing(willShow);\n    this._emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this._drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this._renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}