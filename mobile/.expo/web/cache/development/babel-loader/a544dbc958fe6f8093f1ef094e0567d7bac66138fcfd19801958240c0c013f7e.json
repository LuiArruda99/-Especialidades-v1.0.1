{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport State from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar _gestureInstances = 0;\nvar GestureHandler = function () {\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this._gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }]);\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.view = null;\n    this.config = {};\n    this.hammer = null;\n    this.pendingGestures = {};\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n      if (_this.hammer) {\n        _this.hammer.stop();\n        _this.hammer.destroy();\n      }\n      _this.hammer = null;\n    };\n    this.isPointInView = function (_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      var rect = _this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    this.sendEvent = function (nativeEvent) {\n      var _this$ref$props = _this.ref.props,\n        onHandlerStateChange = _this$ref$props.onGestureHandlerStateChange,\n        onGestureEvent = _this$ref$props.onGestureHandlerEvent;\n      var event = _this.transformEventData(nativeEvent);\n      invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n      }\n    };\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n      if (!gesture) return;\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n          _this._stillWaiting = _this._getPendingGestures();\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture = _step2.value;\n              if (!_gesture.isDiscrete && _gesture.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n        if (!_this._hasCustomActivationCriteria) {\n          return true;\n        }\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n            deltaRotation: deltaRotation\n          })),\n          success = _this$isGestureEnable.success,\n          failed = _this$isGestureEnable.failed;\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n          _this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      var params = _this.getHammerConfig();\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    };\n    this._gestureInstance = _gestureInstances++;\n  }\n  _createClass(GestureHandler, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent() {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"parseNativeEvent\",\n    value: function parseNativeEvent(nativeEvent) {\n      return nativeEvent;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n        enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n        props = _objectWithoutProperties(_ref2, [\"enabled\"]);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n        numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref) {\n      var _this2 = this;\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n        _this2.onRawEvent(ev);\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          return _this3.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n        deltaY = _ref4.deltaY,\n        rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {}\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }]);\n  return GestureHandler;\n}();\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = _slicedToArray(argMapping[index], 2),\n                key = _argMapping$index[0],\n                value = _argMapping$index[1];\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n      var _handlerTag = _ref6._handlerTag;\n      return NodeManager.getHandler(_handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n  ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'].forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","_gestureInstances","GestureHandler","_createClass","key","get","name","_gestureInstance","Error","_this","_classCallCheck","isGestureRunning","hasGestureFailed","view","config","hammer","pendingGestures","oldState","UNDETERMINED","previousState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","_iterator","_createForOfIteratorHelperLoose","_step","done","gesture","value","removePendingGesture","id","destroy","stop","isPointInView","_ref","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","_this$ref$props","ref","props","onHandlerStateChange","onGestureHandlerStateChange","onGestureEvent","onGestureHandlerEvent","event","transformEventData","invokeNullableMethod","state","sync","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_iterator2","_step2","_hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","_objectSpread","success","failed","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","addPendingGesture","parseNativeEvent","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","_objectWithoutProperties","ensureConfig","_iterator3","_step3","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","transformNativeEvent","handlerTag","target","timeStamp","Date","now","cancelPendingGestures","_i","_Object$values","Object","values","cancelEvent","notifyPendingGestures","_i2","_Object$values2","onGestureEnded","forceInvalidate","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","setView","_this2","Manager","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","method","__getHandler","handler","argMapping","__nodeConfig","index","_argMapping$index","_slicedToArray","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref6","_handlerTag","getHandler","v","forEach","prop","Number","NaN"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/react-native-gesture-handler/web/GestureHandler.js"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport State from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\nlet _gestureInstances = 0;\n\nclass GestureHandler {\n  isGestureRunning = false;\n  hasGestureFailed = false;\n  view = null;\n  config = {};\n  hammer = null;\n  pendingGestures = {};\n  oldState = State.UNDETERMINED;\n  previousState = State.UNDETERMINED;\n  lastSentState = null;\n\n  get id() {\n    return `${this.name}${this._gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent() {\n    return { success: true };\n  }\n\n  parseNativeEvent(nativeEvent) {\n    return nativeEvent;\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop();\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }) => {\n    const rect = this.view.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type) {\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(event) {\n    return {};\n  }\n\n  sendEvent = nativeEvent => {\n    const {\n      onGestureHandlerStateChange: onHandlerStateChange,\n      onGestureHandlerEvent: onGestureEvent,\n    } = this.ref.props;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state;\n      invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event =>\n        this.onGestureEnded(event)\n      );\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n\n  onStart({ deltaX, deltaY, rotation }) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer, inputData) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this._hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(inputData) {}\n}\n\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n              if (key in event.nativeEvent) {\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config) {\n  const props = { ...config };\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ _handlerTag }) => NodeManager.getHandler(_handlerTag))\n      .filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAM,MAAM,gBAAgB;AAAC,OAAAC,cAAA;AAGpC,OAAOC,KAAK;AACZ,SAASC,QAAQ;AACjB,OAAO,KAAKC,WAAW;AAEvB,IAAIC,iBAAiB,GAAG,CAAC;AAAC,IAEpBC,cAAc;EAAAC,YAAA,CAAAD,cAAA;IAAAE,GAAA;IAAAC,GAAA,WAAAA,IAAA,EAWT;MACP,YAAU,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,gBAAgB;IAC7C;EAAC;IAAAH,GAAA;IAAAC,GAAA,WAAAA,IAAA,EAEgB;MACf,OAAO,KAAK;IACd;EAAC;IAAAD,GAAA;IAAAC,GAAA,WAAAA,IAAA,EAEgC;MAC/B,MAAM,IAAIG,KAAK,CAAC,yDAAyD,CAAC;IAC5E;EAAC;EAED,SAAAN,eAAA,EAAc;IAAA,IAAAO,KAAA;IAAAC,eAAA,OAAAR,cAAA;IAAA,KAtBdS,gBAAgB,GAAG,KAAK;IAAA,KACxBC,gBAAgB,GAAG,KAAK;IAAA,KACxBC,IAAI,GAAG,IAAI;IAAA,KACXC,MAAM,GAAG,CAAC,CAAC;IAAA,KACXC,MAAM,GAAG,IAAI;IAAA,KACbC,eAAe,GAAG,CAAC,CAAC;IAAA,KACpBC,QAAQ,GAAGnB,KAAK,CAACoB,YAAY;IAAA,KAC7BC,aAAa,GAAGrB,KAAK,CAACoB,YAAY;IAAA,KAClCE,aAAa,GAAG,IAAI;IAAA,KAgDpBC,kBAAkB,GAAG,YAAM;MACzB,IAAIC,KAAK,CAACC,OAAO,CAACd,KAAI,CAACK,MAAM,CAACU,OAAO,CAAC,EAAE;QACtC,SAAAC,SAAA,GAAAC,+BAAA,CAAsBjB,KAAI,CAACK,MAAM,CAACU,OAAO,GAAAG,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;UAAA,IAAhCC,OAAO,GAAAF,KAAA,CAAAG,KAAA;UAChBD,OAAO,CAACE,oBAAoB,CAACtB,KAAI,CAACuB,EAAE,CAAC;QACvC;MACF;IACF,CAAC;IAAA,KAqBDC,OAAO,GAAG,YAAM;MACdxB,KAAI,CAACY,kBAAkB,EAAE;MAEzB,IAAIZ,KAAI,CAACM,MAAM,EAAE;QACfN,KAAI,CAACM,MAAM,CAACmB,IAAI,EAAE;QAClBzB,KAAI,CAACM,MAAM,CAACkB,OAAO,EAAE;MACvB;MACAxB,KAAI,CAACM,MAAM,GAAG,IAAI;IACpB,CAAC;IAAA,KAEDoB,aAAa,GAAG,UAAAC,IAAA,EAAc;MAAA,IAAXC,CAAC,GAAAD,IAAA,CAADC,CAAC;QAAEC,CAAC,GAAAF,IAAA,CAADE,CAAC;MACrB,IAAMC,IAAI,GAAG9B,KAAI,CAACI,IAAI,CAAC2B,qBAAqB,EAAE;MAC9C,IAAMC,aAAa,GACjBJ,CAAC,IAAIE,IAAI,CAACG,IAAI,IAAIL,CAAC,IAAIE,IAAI,CAACI,KAAK,IAAIL,CAAC,IAAIC,IAAI,CAACK,GAAG,IAAIN,CAAC,IAAIC,IAAI,CAACM,MAAM;MACxE,OAAOJ,aAAa;IACtB,CAAC;IAAA,KAwCDK,SAAS,GAAG,UAAAC,WAAW,EAAI;MAAA,IAAAC,eAAA,GAIrBvC,KAAI,CAACwC,GAAG,CAACC,KAAK;QAFaC,oBAAoB,GAAAH,eAAA,CAAjDI,2BAA2B;QACJC,cAAc,GAAAL,eAAA,CAArCM,qBAAqB;MAGvB,IAAMC,KAAK,GAAG9C,KAAI,CAAC+C,kBAAkB,CAACT,WAAW,CAAC;MAElDU,oBAAoB,CAAC,gBAAgB,EAAEJ,cAAc,EAAEE,KAAK,CAAC;MAC7D,IAAI9C,KAAI,CAACW,aAAa,KAAKmC,KAAK,CAACR,WAAW,CAACW,KAAK,EAAE;QAClDjD,KAAI,CAACW,aAAa,GAAGmC,KAAK,CAACR,WAAW,CAACW,KAAK;QAC5CD,oBAAoB,CAAC,sBAAsB,EAAEN,oBAAoB,EAAEI,KAAK,CAAC;MAC3E;IACF,CAAC;IAAA,KAgJDI,IAAI,GAAG,YAAM;MACX,IAAM9B,OAAO,GAAGpB,KAAI,CAACM,MAAM,CAACV,GAAG,CAACI,KAAI,CAACH,IAAI,CAAC;MAC1C,IAAI,CAACuB,OAAO,EAAE;MAEd,IAAM+B,MAAM,GAAG,SAATA,MAAMA,CAAIC,UAAU,EAAEC,SAAS,EAAK;QACxC,IAAI,CAACrD,KAAI,CAACK,MAAM,CAACiD,OAAO,EAAE;UACxBtD,KAAI,CAACE,gBAAgB,GAAG,KAAK;UAC7BF,KAAI,CAACG,gBAAgB,GAAG,KAAK;UAC7B,OAAO,KAAK;QACd;QAGA,IACE,CAACkD,SAAS,IACV,CAACD,UAAU,CAACG,OAAO,IACnB,OAAOF,SAAS,CAACG,WAAW,KAAK,WAAW,EAC5C;UACA,OAAOxD,KAAI,CAACyD,0BAA0B;QACxC;QAEA,IAAIzD,KAAI,CAACG,gBAAgB,EAAE;UACzB,OAAO,KAAK;QACd;QAEA,IAAI,CAACH,KAAI,CAAC0D,UAAU,EAAE;UACpB,IAAI1D,KAAI,CAACE,gBAAgB,EAAE;YACzB,OAAO,IAAI;UACb;UAGAF,KAAI,CAAC2D,aAAa,GAAG3D,KAAI,CAAC4D,mBAAmB,EAAE;UAE/C,IAAI5D,KAAI,CAAC2D,aAAa,CAACE,MAAM,EAAE;YAG7B,SAAAC,UAAA,GAAA7C,+BAAA,CAAsBjB,KAAI,CAAC2D,aAAa,GAAAI,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA3C,IAAA,GAAE;cAAA,IAA/BC,QAAO,GAAA2C,MAAA,CAAA1C,KAAA;cAEhB,IAAI,CAACD,QAAO,CAACsC,UAAU,IAAItC,QAAO,CAAClB,gBAAgB,EAAE;gBACnDF,KAAI,CAACG,gBAAgB,GAAG,IAAI;gBAC5BH,KAAI,CAACE,gBAAgB,GAAG,KAAK;gBAC7B,OAAO,KAAK;cACd;YACF;YAEA,OAAO,KAAK;UACd;QACF;QAGA,IAAI,CAACF,KAAI,CAACgE,4BAA4B,EAAE;UACtC,OAAO,IAAI;QACb;QAEA,IAAMC,aAAa,GACjBjE,KAAI,CAACkE,eAAe,IAAI,IAAI,GACxB,CAAC,GACDb,SAAS,CAACc,QAAQ,GAAGnE,KAAI,CAACkE,eAAe;QAAC,IAAAE,qBAAA,GACpBpE,KAAI,CAACqE,wBAAwB,CACvDrE,KAAI,CAACsE,SAAS,EAAE,EAChBlB,UAAU,EAAAmB,aAAA,CAAAA,aAAA,KAELlB,SAAS;YACZY,aAAa,EAAbA;UAAa,GAEhB;UAPOO,OAAO,GAAAJ,qBAAA,CAAPI,OAAO;UAAEC,MAAM,GAAAL,qBAAA,CAANK,MAAM;QASvB,IAAIA,MAAM,EAAE;UACVzE,KAAI,CAAC0E,mBAAmB,CAACrB,SAAS,CAAC;UACnCrD,KAAI,CAACG,gBAAgB,GAAG,IAAI;QAC9B;QACA,OAAOqE,OAAO;MAChB,CAAC;MAED,IAAMG,MAAM,GAAG3E,KAAI,CAAC4E,eAAe,EAAE;MACrCxD,OAAO,CAACyD,GAAG,CAAAN,aAAA,CAAAA,aAAA,KAAMI,MAAM;QAAExB,MAAM,EAANA;MAAM,GAAG;IACpC,CAAC;IA3VC,IAAI,CAACrD,gBAAgB,GAAGN,iBAAiB,EAAE;EAC7C;EAACE,YAAA,CAAAD,cAAA;IAAAE,GAAA;IAAA0B,KAAA,WAAAiD,UAAA,EAEW;MACV,OAAO,IAAI,CAACjE,MAAM;IACpB;EAAC;IAAAV,GAAA;IAAA0B,KAAA,WAAAyD,eAEc1D,OAAO,EAAE,CAAC;EAAC;IAAAzB,GAAA;IAAA0B,KAAA,WAAAC,qBAELC,EAAE,EAAE;MACvB,OAAO,IAAI,CAAChB,eAAe,CAACgB,EAAE,CAAC;IACjC;EAAC;IAAA5B,GAAA;IAAA0B,KAAA,WAAA0D,kBAEiB3D,OAAO,EAAE;MACzB,IAAI,CAACb,eAAe,CAACa,OAAO,CAACG,EAAE,CAAC,GAAGH,OAAO;IAC5C;EAAC;IAAAzB,GAAA;IAAA0B,KAAA,WAAAgD,yBAAA,EAE0B;MACzB,OAAO;QAAEG,OAAO,EAAE;MAAK,CAAC;IAC1B;EAAC;IAAA7E,GAAA;IAAA0B,KAAA,WAAA2D,iBAEgB1C,WAAW,EAAE;MAC5B,OAAOA,WAAW;IACpB;EAAC;IAAA3C,GAAA;IAAA0B,KAAA,WAAA4D,kCAMiC5E,MAAM,EAAE;MACxC,OAAO,IAAI;IACb;EAAC;IAAAV,GAAA;IAAA0B,KAAA,WAAA6D,oBAAAC,KAAA,EAUiD;MAAA,IAAAC,aAAA,GAAAD,KAAA,CAA5B7B,OAAO;QAAPA,OAAO,GAAA8B,aAAA,cAAG,IAAI,GAAAA,aAAA;QAAK3C,KAAK,GAAA4C,wBAAA,CAAAF,KAAA;MAC5C,IAAI,CAACvE,kBAAkB,EAAE;MAEzB,IAAI,CAACP,MAAM,GAAGiF,YAAY,CAAAf,aAAA;QAAGjB,OAAO,EAAPA;MAAO,GAAKb,KAAK,EAAG;MACjD,IAAI,CAACuB,4BAA4B,GAAG,IAAI,CAACiB,iCAAiC,CACxE,IAAI,CAAC5E,MAAM,CACZ;MACD,IAAIQ,KAAK,CAACC,OAAO,CAAC,IAAI,CAACT,MAAM,CAACU,OAAO,CAAC,EAAE;QACtC,SAAAwE,UAAA,GAAAtE,+BAAA,CAAsB,IAAI,CAACZ,MAAM,CAACU,OAAO,GAAAyE,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAApE,IAAA,GAAE;UAAA,IAAhCC,OAAO,GAAAoE,MAAA,CAAAnE,KAAA;UAChBD,OAAO,CAAC2D,iBAAiB,CAAC,IAAI,CAAC;QACjC;MACF;MAEA,IAAI,IAAI,CAACzE,MAAM,EAAE;QACf,IAAI,CAAC4C,IAAI,EAAE;MACb;MACA,OAAO,IAAI,CAAC7C,MAAM;IACpB;EAAC;IAAAV,GAAA;IAAA0B,KAAA,WAAAoE,SAmBQC,IAAI,EAAE;MACb,OAAOpG,QAAQ,CAACoG,IAAI,CAAC;IACvB;EAAC;IAAA/F,GAAA;IAAA0B,KAAA,WAAA0B,mBAEkBD,KAAK,EAAE;MAAA,IAChB6C,SAAS,GAAoC7C,KAAK,CAAlD6C,SAAS;QAAeC,gBAAgB,GAAK9C,KAAK,CAAvCU,WAAW;MAE9B,IAAMqC,YAAY,GAAG/C,KAAK,CAACgD,eAAe,CAAC,CAAC,CAAC;MAC7C,IAAM9D,aAAa,GAAG,IAAI,CAACN,aAAa,CAAC;QACvCE,CAAC,EAAEiE,YAAY,CAACE,OAAO;QACvBlE,CAAC,EAAEgE,YAAY,CAACG;MAClB,CAAC,CAAC;MAEF,IAAM/C,KAAK,GAAG,IAAI,CAACwC,QAAQ,CAACE,SAAS,CAAC;MACtC,IAAI1C,KAAK,KAAK,IAAI,CAACvC,aAAa,EAAE;QAChC,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACE,aAAa;QAClC,IAAI,CAACA,aAAa,GAAGuC,KAAK;MAC5B;MAEA,OAAO;QACLX,WAAW,EAAAiC,aAAA,CAAAA,aAAA;UACTqB,gBAAgB,EAAhBA,gBAAgB;UAChB3C,KAAK,EAALA,KAAK;UACLjB,aAAa,EAAbA;QAAa,GACV,IAAI,CAACiE,oBAAoB,CAACnD,KAAK,CAAC;UAEnCoD,UAAU,EAAE,IAAI,CAACA,UAAU;UAC3BC,MAAM,EAAE,IAAI,CAAC3D,GAAG;UAChBhC,QAAQ,EAAE,IAAI,CAACA;QAAQ,EACxB;QACD4F,SAAS,EAAEC,IAAI,CAACC,GAAG;MACrB,CAAC;IACH;EAAC;IAAA3G,GAAA;IAAA0B,KAAA,WAAA4E,qBAEoBnD,KAAK,EAAE;MAC1B,OAAO,CAAC,CAAC;IACX;EAAC;IAAAnD,GAAA;IAAA0B,KAAA,WAAAkF,sBAiBqBzD,KAAK,EAAE;MAC3B,SAAA0D,EAAA,MAAAC,cAAA,GAAsBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpG,eAAe,CAAC,EAAAiG,EAAA,GAAAC,cAAA,CAAA5C,MAAA,EAAA2C,EAAA,IAAE;QAAtD,IAAMpF,OAAO,GAAAqF,cAAA,CAAAD,EAAA;QAChB,IAAIpF,OAAO,IAAIA,OAAO,CAAClB,gBAAgB,EAAE;UACvCkB,OAAO,CAACjB,gBAAgB,GAAG,IAAI;UAC/BiB,OAAO,CAACwF,WAAW,CAAC9D,KAAK,CAAC;QAC5B;MACF;IACF;EAAC;IAAAnD,GAAA;IAAA0B,KAAA,WAAAwF,sBAAA,EAEuB;MACtB,SAAAC,GAAA,MAAAC,eAAA,GAAsBL,MAAM,CAACC,MAAM,CAAC,IAAI,CAACpG,eAAe,CAAC,EAAAuG,GAAA,GAAAC,eAAA,CAAAlD,MAAA,EAAAiD,GAAA,IAAE;QAAtD,IAAM1F,OAAO,GAAA2F,eAAA,CAAAD,GAAA;QAChB,IAAI1F,OAAO,EAAE;UACXA,OAAO,CAAC0D,cAAc,CAAC,IAAI,CAAC;QAC9B;MACF;IACF;EAAC;IAAAnF,GAAA;IAAA0B,KAAA,WAAA2F,eAEclE,KAAK,EAAE;MACpB,IAAI,CAAC5C,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACqG,qBAAqB,CAACzD,KAAK,CAAC;IACnC;EAAC;IAAAnD,GAAA;IAAA0B,KAAA,WAAA4F,gBAEenE,KAAK,EAAE;MACrB,IAAI,IAAI,CAAC5C,gBAAgB,EAAE;QACzB,IAAI,CAACC,gBAAgB,GAAG,IAAI;QAC5B,IAAI,CAACyG,WAAW,CAAC9D,KAAK,CAAC;MACzB;IACF;EAAC;IAAAnD,GAAA;IAAA0B,KAAA,WAAAuF,YAEW9D,KAAK,EAAE;MACjB,IAAI,CAAC+D,qBAAqB,EAAE;MAC5B,IAAI,CAACxE,SAAS,CAAAkC,aAAA,CAAAA,aAAA,KACTzB,KAAK;QACR6C,SAAS,EAAExG,MAAM,CAAC+H,YAAY;QAC9BC,OAAO,EAAE;MAAI,GACb;MACF,IAAI,CAACH,cAAc,CAAClE,KAAK,CAAC;IAC5B;EAAC;IAAAnD,GAAA;IAAA0B,KAAA,WAAA+F,WAAAC,KAAA,EAEuB;MAAA,IAAXC,OAAO,GAAAD,KAAA,CAAPC,OAAO;MAClB,IAAIA,OAAO,EAAE;QACX,IAAI,CAACnH,gBAAgB,GAAG,KAAK;MAC/B;IACF;EAAC;IAAAR,GAAA;IAAA0B,KAAA,WAAAkG,QAEO/E,GAAG,EAAE;MAAA,IAAAgF,MAAA;MACX,IAAIhF,GAAG,IAAI,IAAI,EAAE;QACf,IAAI,CAAChB,OAAO,EAAE;QACd,IAAI,CAACpB,IAAI,GAAG,IAAI;QAChB;MACF;MAEA,IAAI,CAACoC,GAAG,GAAGA,GAAG;MAEd,IAAI,CAACpC,IAAI,GAAGhB,cAAc,CAACoD,GAAG,CAAC;MAC/B,IAAI,CAAClC,MAAM,GAAG,IAAInB,MAAM,CAACsI,OAAO,CAAC,IAAI,CAACrH,IAAI,CAAC;MAE3C,IAAI,CAACI,QAAQ,GAAGnB,KAAK,CAACoB,YAAY;MAClC,IAAI,CAACC,aAAa,GAAGrB,KAAK,CAACoB,YAAY;MACvC,IAAI,CAACE,aAAa,GAAG,IAAI;MAAC,IAElB+G,kBAAkB,GAAK,IAAI,CAA3BA,kBAAkB;MAC1B,IAAMtG,OAAO,GAAG,IAAIsG,kBAAkB,CAAC,IAAI,CAAC9C,eAAe,EAAE,CAAC;MAC9D,IAAI,CAACtE,MAAM,CAACqH,GAAG,CAACvG,OAAO,CAAC;MAExB,IAAI,CAACd,MAAM,CAACsH,EAAE,CAAC,cAAc,EAAE,UAAAC,EAAE,EAAI;QACnC,IAAI,CAACL,MAAI,CAACnH,MAAM,CAACiD,OAAO,EAAE;UACxBkE,MAAI,CAACrH,gBAAgB,GAAG,KAAK;UAC7BqH,MAAI,CAACtH,gBAAgB,GAAG,KAAK;UAC7B;QACF;QAEAsH,MAAI,CAACJ,UAAU,CAACS,EAAE,CAAC;QAInB,IAAIL,MAAI,CAACtD,eAAe,KAAK,IAAI,IAAI2D,EAAE,CAAC1D,QAAQ,KAAK,CAAC,EAAE;UACtDqD,MAAI,CAACtD,eAAe,GAAG2D,EAAE,CAAC1D,QAAQ;QACpC;QACA,IAAI0D,EAAE,CAACV,OAAO,EAAE;UAEdW,UAAU,CAAC,YAAM;YACfN,MAAI,CAACtD,eAAe,GAAG,IAAI;YAC3BsD,MAAI,CAACrH,gBAAgB,GAAG,KAAK;UAC/B,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,IAAI,CAAC4H,WAAW,EAAE;MAClB,IAAI,CAAC7E,IAAI,EAAE;IACb;EAAC;IAAAvD,GAAA;IAAA0B,KAAA,WAAA0G,YAAA,EAEa;MAAA,IAAAC,MAAA;MACZ,IAAI,CAAC,IAAI,CAACtE,UAAU,EAAE;QACpB,IAAI,CAACpD,MAAM,CAACsH,EAAE,CAAI,IAAI,CAAC/H,IAAI,YAAS,UAAAiD,KAAK;UAAA,OAAIkF,MAAI,CAACC,OAAO,CAACnF,KAAK,CAAC;QAAA,EAAC;QACjE,IAAI,CAACxC,MAAM,CAACsH,EAAE,CAAI,IAAI,CAAC/H,IAAI,YAAO,IAAI,CAACA,IAAI,aAAU,UAAAiD,KAAK;UAAA,OACxDkF,MAAI,CAAChB,cAAc,CAAClE,KAAK,CAAC;QAAA,EAC3B;MACH;MACA,IAAI,CAACxC,MAAM,CAACsH,EAAE,CAAC,IAAI,CAAC/H,IAAI,EAAE,UAAAgI,EAAE;QAAA,OAAIG,MAAI,CAACE,kBAAkB,CAACL,EAAE,CAAC;MAAA,EAAC;IAC9D;EAAC;IAAAlI,GAAA;IAAA0B,KAAA,WAAA4G,QAAAE,KAAA,EAEqC;MAAA,IAA5BC,MAAM,GAAAD,KAAA,CAANC,MAAM;QAAEC,MAAM,GAAAF,KAAA,CAANE,MAAM;QAAElE,QAAQ,GAAAgE,KAAA,CAARhE,QAAQ;MAEhC,IAAI,CAAC3D,QAAQ,GAAGnB,KAAK,CAACoB,YAAY;MAClC,IAAI,CAACC,aAAa,GAAGrB,KAAK,CAACoB,YAAY;MACvC,IAAI,CAACE,aAAa,GAAG,IAAI;MAEzB,IAAI,CAACT,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACoI,UAAU,GAAGF,MAAM;MACxB,IAAI,CAACG,UAAU,GAAGF,MAAM;MACxB,IAAI,CAACnE,eAAe,GAAGC,QAAQ;IACjC;EAAC;IAAAxE,GAAA;IAAA0B,KAAA,WAAA6G,mBAEkBL,EAAE,EAAE;MACrB,IAAI,CAACxF,SAAS,CAACwF,EAAE,CAAC;IACpB;EAAC;IAAAlI,GAAA;IAAA0B,KAAA,WAAAmH,UAAA,EAEW,CAAC;EAAC;IAAA7I,GAAA;IAAA0B,KAAA,WAAAuC,oBAAA,EAEQ;MACpB,IAAI/C,KAAK,CAACC,OAAO,CAAC,IAAI,CAACT,MAAM,CAACU,OAAO,CAAC,IAAI,IAAI,CAACV,MAAM,CAACU,OAAO,CAAC8C,MAAM,EAAE;QAGpE,IAAM4E,YAAY,GAAG,IAAI,CAACpI,MAAM,CAACU,OAAO,CAAC2H,MAAM,CAC7C,UAAAC,KAAA;UAAA,IAAGxI,gBAAgB,GAAAwI,KAAA,CAAhBxI,gBAAgB;UAAA,OAAOA,gBAAgB,KAAK,KAAK;QAAA,EACrD;QACD,OAAOsI,YAAY;MACrB;MACA,OAAO,EAAE;IACX;EAAC;IAAA9I,GAAA;IAAA0B,KAAA,WAAAuD,gBAAA,EAEiB;MAChB,IAAMgE,QAAQ,GACZ,IAAI,CAACvI,MAAM,CAACwI,WAAW,KAAK,IAAI,CAACxI,MAAM,CAACmD,WAAW,GAC/C,IAAI,CAACnD,MAAM,CAACwI,WAAW,GACvB,CAAC;MACP,OAAO;QACLD,QAAQ,EAARA;MACF,CAAC;IACH;EAAC;IAAAjJ,GAAA;IAAA0B,KAAA,WAAAqD,oBA+EmBrB,SAAS,EAAE,CAAC;EAAC;IAAA1D,GAAA;IAAAC,GAAA,WAAAA,IAAA,EApUR;MACvB,MAAM,IAAIG,KAAK,CAAC,iDAAiD,CAAC;IACpE;EAAC;EAAA,OAAAN,cAAA;AAAA;AAsUH,SAASuD,oBAAoBA,CAACnD,IAAI,EAAEiJ,MAAM,EAAEhG,KAAK,EAAE;EACjD,IAAIgG,MAAM,EAAE;IACV,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;MAChCA,MAAM,CAAChG,KAAK,CAAC;IACf,CAAC,MAAM;MAEL,IACE,cAAc,IAAIgG,MAAM,IACxB,OAAOA,MAAM,CAACC,YAAY,KAAK,UAAU,EACzC;QACA,IAAMC,OAAO,GAAGF,MAAM,CAACC,YAAY,EAAE;QACrC/F,oBAAoB,CAACnD,IAAI,EAAEmJ,OAAO,EAAElG,KAAK,CAAC;MAC5C,CAAC,MAAM;QACL,IAAI,cAAc,IAAIgG,MAAM,EAAE;UAAA,IACpBG,UAAU,GAAKH,MAAM,CAACI,YAAY,CAAlCD,UAAU;UAClB,IAAIpI,KAAK,CAACC,OAAO,CAACmI,UAAU,CAAC,EAAE;YAC7B,KAAK,IAAME,KAAK,IAAIF,UAAU,EAAE;cAAA,IAAAG,iBAAA,GAAAC,cAAA,CACTJ,UAAU,CAACE,KAAK,CAAC;gBAA/BxJ,GAAG,GAAAyJ,iBAAA;gBAAE/H,KAAK,GAAA+H,iBAAA;cACjB,IAAIzJ,GAAG,IAAImD,KAAK,CAACR,WAAW,EAAE;gBAC5B,IAAMgH,WAAW,GAAGxG,KAAK,CAACR,WAAW,CAAC3C,GAAG,CAAC;gBAC1C,IAAI0B,KAAK,IAAIA,KAAK,CAACkI,QAAQ,EAAE;kBAE3BlI,KAAK,CAACkI,QAAQ,CAACD,WAAW,CAAC;gBAC7B,CAAC,MAAM;kBAELR,MAAM,CAACI,YAAY,CAACD,UAAU,CAACE,KAAK,CAAC,GAAG,CAACxJ,GAAG,EAAE2J,WAAW,CAAC;gBAC5D;cACF;YACF;UACF;QACF;MACF;IACF;EACF;AACF;AAGA,SAAShE,YAAYA,CAACjF,MAAM,EAAE;EAC5B,IAAMoC,KAAK,GAAA8B,aAAA,KAAQlE,MAAM,CAAE;EAE3B,IAAI,SAAS,IAAIA,MAAM,EAAE;IACvBoC,KAAK,CAAC+G,OAAO,GAAGnJ,MAAM,CAACmJ,OAAO;IAC9B/G,KAAK,CAACgH,SAAS,GAAGhH,KAAK,CAAC+G,OAAO,GAAG/G,KAAK,CAAC+G,OAAO;EACjD;EACA,IAAI,aAAa,IAAInJ,MAAM,EAAE;IAC3BoC,KAAK,CAACiH,WAAW,GAAGrJ,MAAM,CAACqJ,WAAW;IACtCjH,KAAK,CAACkH,aAAa,GAAGlH,KAAK,CAACiH,WAAW,GAAGjH,KAAK,CAACiH,WAAW;EAC7D;EACA,IAAI,SAAS,IAAIrJ,MAAM,EAAE;IACvBoC,KAAK,CAACmH,OAAO,GAAGvJ,MAAM,CAACuJ,OAAO;IAC9BnH,KAAK,CAACoH,SAAS,GAAGxJ,MAAM,CAACuJ,OAAO,GAAGvJ,MAAM,CAACuJ,OAAO;EACnD;EACA,IAAI,SAAS,IAAIvJ,MAAM,EAAE;IACvBoC,KAAK,CAAC1B,OAAO,GAAG+I,OAAO,CAACzJ,MAAM,CAACU,OAAO,CAAC,CACpCgJ,GAAG,CAAC,UAAAC,KAAA;MAAA,IAAGC,WAAW,GAAAD,KAAA,CAAXC,WAAW;MAAA,OAAO1K,WAAW,CAAC2K,UAAU,CAACD,WAAW,CAAC;IAAA,EAAC,CAC7DvB,MAAM,CAAC,UAAAyB,CAAC;MAAA,OAAIA,CAAC;IAAA,EAAC;EACnB,CAAC,MAAM;IACL1H,KAAK,CAAC1B,OAAO,GAAG,IAAI;EACtB;EAEA,CACE,aAAa,EACb,aAAa,EACb,SAAS,EACT,SAAS,EACT,WAAW,EACX,eAAe,EACf,WAAW,EACX,aAAa,EACb,kBAAkB,EAClB,kBAAkB,EAClB,gBAAgB,EAChB,gBAAgB,EAChB,oBAAoB,EACpB,kBAAkB,EAClB,oBAAoB,EACpB,kBAAkB,CACnB,CAACqJ,OAAO,CAAC,UAAAC,IAAI,EAAI;IAChB,IAAI,OAAO5H,KAAK,CAAC4H,IAAI,CAAC,KAAK,WAAW,EAAE;MACtC5H,KAAK,CAAC4H,IAAI,CAAC,GAAGC,MAAM,CAACC,GAAG;IAC1B;EACF,CAAC,CAAC;EACF,OAAO9H,KAAK;AACd;AAEA,SAASqH,OAAOA,CAACzI,KAAK,EAAE;EACtB,OAAOA,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGR,KAAK,CAACC,OAAO,CAACO,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AACpE;AAEA,eAAe5B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}