{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n    _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var initialRoutes = [];\n  if (compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens)\n    });\n  }\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n      return {\n        name: name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);\n  }))).sort(function (a, b) {\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n    return bWildcardIndex - aWildcardIndex;\n  });\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) === null || _configs$find === void 0 ? void 0 : _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      routeNames = _matchAgainstConfigs.routeNames,\n      allParams = _matchAgainstConfigs.allParams,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routeNames !== undefined) {\n      remaining = remainingPath;\n      current = createNestedStateObject(createRouteObjects(configs, routeNames, allParams), initialRoutes);\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n        _routeNames = _matchAgainstConfigs2.routeNames,\n        _allParams = _matchAgainstConfigs2.allParams,\n        _remainingPath = _matchAgainstConfigs2.remainingPath;\n      remaining = _remainingPath;\n      if (_routeNames === undefined) {\n        var segments = remaining.split('/');\n        _routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n      var state = createNestedStateObject(createRouteObjects(configs, _routeNames, _allParams), initialRoutes);\n      if (current) {\n        var _current2;\n        while ((_current = current) === null || _current === void 0 ? void 0 : _current.routes[current.index || 0].state) {\n          var _current;\n          current = current.routes[current.index || 0].state;\n        }\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n      current = state;\n    }\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routeNames;\n  var allParams;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      routeNames = _toConsumableArray(config.routeNames);\n      var paramPatterns = config.pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      });\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce(function (acc, p, i) {\n          var value = match[(i + 1) * 2].replace(/\\//, '');\n          acc[p] = value;\n          return acc;\n        }, {});\n      }\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routeNames: routeNames,\n    allParams: allParams,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens)\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, routeName, params, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params\n        }]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var initialRoute = findInitialRoute(route.name, initialRoutes);\n  state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n    }\n  }\n  return state;\n};\nvar createRouteObjects = function createRouteObjects(configs, routeNames, allParams) {\n  return routeNames.map(function (name) {\n    var config = configs.find(function (c) {\n      return c.screen === name;\n    });\n    var params;\n    if (allParams && (config === null || config === void 0 ? void 0 : config.path)) {\n      var pattern = config.path;\n      if (pattern) {\n        var paramPatterns = pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        });\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce(function (acc, p) {\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            var value = allParams[p];\n            if (value) {\n              var _config$parse;\n              acc[key] = ((_config$parse = config.parse) === null || _config$parse === void 0 ? void 0 : _config$parse[key]) ? config.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n        }\n      }\n    }\n    if (params && Object.keys(params).length) {\n      return {\n        name: name,\n        params: params\n      };\n    }\n    return {\n      name: name\n    };\n  });\n};\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n  var current = state;\n  while ((_current3 = current) === null || _current3 === void 0 ? void 0 : _current3.routes[current.index || 0].state) {\n    var _current3;\n    current = current.routes[current.index || 0].state;\n  }\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","_ref","_checkLegacyPathConfi","_checkLegacyPathConfi2","_slicedToArray","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","concat","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","apply","_toConsumableArray","key","createNormalizedConfigs","sort","a","b","pattern","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","match","find","config","routeNames","every","_configs$find","c","screen","parse","result","current","_matchAgainstConfigs","matchAgainstConfigs","_objectSpread","regex","RegExp","source","allParams","remainingPath","createRouteObjects","_matchAgainstConfigs2","segments","shift","join","state","_current2","_current","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","paramPatterns","reduce","acc","value","_iterator","_createForOfIteratorHelperLoose","_step","done","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","Error","forEach","nestedConfig","_pattern","pop","it","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","_config$parse","_current4","_current3","parseConfig","query"],"sources":["/Users/luizclaudioarruda/Desktop/NLW_Happy2.0/mobile/node_modules/@react-navigation/core/lib/module/getStateFromPath.tsx"],"sourcesContent":["import escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * Example:\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens),\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routeNames !== undefined) {\n      // This will always be empty if full path matched\n      remaining = remainingPath;\n      current = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n        remaining,\n        configs\n      );\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routeNames === undefined) {\n        const segments = remaining.split('/');\n\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routeNames: string[] | undefined;\n  let allParams: Record<string, any> | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      routeNames = [...config.routeNames];\n\n      const paramPatterns = config.pattern\n        .split('/')\n        .filter((p) => p.startsWith(':'));\n\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce<Record<string, any>>((acc, p, i) => {\n          const value = match![(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n          acc[p] = value;\n\n          return acc;\n        }, {});\n      }\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routeNames, allParams, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  routeName: string,\n  params: Record<string, any> | undefined,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { name: routeName as string, params }],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params }],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute },\n          { name: routeName as string, params, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: { name: string; params?: object }[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as { name: string; params?: object };\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(\n    initialRoute,\n    route.name,\n    route.params,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as { name: string; params?: object })) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route.name,\n        route.params,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst createRouteObjects = (\n  configs: RouteConfig[],\n  routeNames: string[],\n  allParams?: Record<string, any>\n) =>\n  routeNames.map((name) => {\n    const config = configs.find((c) => c.screen === name);\n\n    let params: object | undefined;\n\n    if (allParams && config?.path) {\n      const pattern = config.path;\n\n      if (pattern) {\n        const paramPatterns = pattern\n          .split('/')\n          .filter((p) => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce<Record<string, any>>((acc, p) => {\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            const value = allParams![p];\n\n            if (value) {\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n        }\n      }\n    }\n\n    if (params && Object.keys(params).length) {\n      return { name, params };\n    }\n\n    return { name };\n  });\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":";;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAMA,OAAOC,qBAAP;AAiDA,eAAe,SAASC,gBAATA,CACbC,IADa,EAEbC,OAFa,EAGY;EAAA,IAAAC,IAAA;EAAA,IAAAC,qBAAA,GACOL,qBAAqB,CAACG,OAAD,CAArD;IAAAG,sBAAA,GAAAC,cAAA,CAAAF,qBAAA;IAAOG,MAAD,GAAAF,sBAAA;IAASG,aAAT,GAAAH,sBAAA;EAEN,IAAII,aAAmC,GAAG,EAA1C;EAEA,IAAID,aAAJ,aAAIA,aAAJ,uBAAIA,aAAa,CAAEE,gBAAnB,EAAqC;IACnCD,aAAa,CAACE,IAAd,CAAmB;MACjBD,gBAAgB,EAAEF,aAAa,CAACE,gBADf;MAEjBE,eAAe,EAAEC,MAAM,CAACC,IAAP,CAAYN,aAAa,CAACO,OAA1B;IAFA,CAAnB;EAID;EAED,IAAMA,OAAO,GAAGP,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEO,OAA/B;EAEA,IAAIC,SAAS,GAAGf,IAAI,CACjBgB,OADa,CACL,MADK,EACG,GADH,EAEbA,OAFa,CAEL,KAFK,EAEE,EAFF,EAGbA,OAHa,CAGL,OAHK,EAGI,EAHJ,CAAhB;EAMAD,SAAS,GAAGA,SAAS,CAACE,QAAV,CAAmB,GAAnB,IAA0BF,SAA1B,MAAAG,MAAA,CAAyCH,SAAzC,MAAZ;EAEA,IAAID,OAAO,KAAKK,SAAhB,EAA2B;IAEzB,IAAMC,MAAM,GAAGL,SAAS,CACrBM,KADY,CACN,GADM,EAEZC,MAFY,CAELC,OAFK,EAGZC,GAHY,CAGR,UAACC,OAAD,EAAUC,CAAV,EAAaC,IAAb,EAAsB;MACzB,IAAMC,IAAI,GAAGC,kBAAkB,CAACJ,OAAD,CAA/B;MAEA,IAAIC,CAAC,KAAKC,IAAI,CAACG,MAAL,GAAc,CAAxB,EAA2B;QACzB,OAAO;UAAEF,IAAF,EAAEA,IAAF;UAAQG,MAAM,EAAEC,gBAAgB,CAAChC,IAAD;QAAhC,CAAP;MACD;MAED,OAAO;QAAE4B,IAAA,EAAAA;MAAF,CAAP;IACD,CAXY,CAAf;IAaA,IAAIR,MAAM,CAACU,MAAX,EAAmB;MACjB,OAAOG,uBAAuB,CAACb,MAAD,EAASZ,aAAT,CAA9B;IACD;IAED,OAAOW,SAAP;EACD;EAGD,IAAMe,OAAO,GAAI,CAAAhC,IAAA,KAAD,EACbgB,MADa,CAAAiB,KAAA,CAAAjC,IAAA,EAAAkC,kBAAA,CAETxB,MAAM,CAACC,IAAP,CAAYC,OAAZ,EAAqBU,GAArB,CAA0B,UAAAa,GAAD;IAAA,OAC1BC,uBAAuB,CACrBhC,MADqB,EAErB+B,GAFqB,EAGrBvB,OAHqB,EAIrB,EAJqB,EAKrBN,aALqB,CADtB;EAAA,EAFS,GAYb+B,IAZa,CAYR,UAACC,CAAD,EAAIC,CAAJ,EAAU;IAOd,IAAID,CAAC,CAACE,OAAF,CAAUC,UAAV,CAAqBF,CAAC,CAACC,OAAvB,CAAJ,EAAqC;MACnC,OAAO,CAAC,CAAR;IACD;IAED,IAAID,CAAC,CAACC,OAAF,CAAUC,UAAV,CAAqBH,CAAC,CAACE,OAAvB,CAAJ,EAAqC;MACnC,OAAO,CAAP;IACD;IAED,IAAME,MAAM,GAAGJ,CAAC,CAACE,OAAF,CAAUrB,KAAV,CAAgB,GAAhB,CAAf;IACA,IAAMwB,MAAM,GAAGJ,CAAC,CAACC,OAAF,CAAUrB,KAAV,CAAgB,GAAhB,CAAf;IAEA,IAAMyB,cAAc,GAAGF,MAAM,CAACG,OAAP,CAAe,GAAf,CAAvB;IACA,IAAMC,cAAc,GAAGH,MAAM,CAACE,OAAP,CAAe,GAAf,CAAvB;IAGA,IAAID,cAAc,KAAK,CAAC,CAApB,IAAyBE,cAAc,KAAK,CAAC,CAAjD,EAAoD;MAClD,OAAO,CAAC,CAAR;IACD;IAED,IAAIF,cAAc,KAAK,CAAC,CAApB,IAAyBE,cAAc,KAAK,CAAC,CAAjD,EAAoD;MAClD,OAAO,CAAP;IACD;IAED,IAAIF,cAAc,KAAKE,cAAvB,EAAuC;MAGrC,OAAOH,MAAM,CAACf,MAAP,GAAgBc,MAAM,CAACd,MAA9B;IACD;IAID,OAAOkB,cAAc,GAAGF,cAAxB;EACD,CAnDa,CAAhB;EAqDA,IAAI/B,SAAS,KAAK,GAAlB,EAAuB;IAGrB,IAAMkC,KAAK,GAAGf,OAAO,CAACgB,IAAR,CACX,UAAAC,MAAD;MAAA,OACEA,MAAM,CAACnD,IAAP,KAAgB,EAAhB,IACAmD,MAAM,CAACC,UAAP,CAAkBC,KAAlB,CAEG,UAAAzB,IAAD;QAAA,IAAA0B,aAAA;QAAA,OAAU,GAAAA,aAAA,GAACpB,OAAO,CAACgB,IAAR,CAAc,UAAAK,CAAD;UAAA,OAAOA,CAAC,CAACC,MAAF,KAAa5B,IAAjC;QAAA,EAAD,cAAA0B,aAAA,uBAACA,aAAA,CAAwCtD,IAAzC,CAAV;MAAA,CAFF,CAHU;IAAA,EAAd;IASA,IAAIiD,KAAJ,EAAW;MACT,OAAOhB,uBAAuB,CAC5BgB,KAAK,CAACG,UAAN,CAAiB5B,GAAjB,CAAqB,UAACI,IAAD,EAAOF,CAAP,EAAUC,IAAV,EAAmB;QACtC,IAAID,CAAC,KAAKC,IAAI,CAACG,MAAL,GAAc,CAAxB,EAA2B;UACzB,OAAO;YAAEF,IAAF,EAAEA,IAAF;YAAQG,MAAM,EAAEC,gBAAgB,CAAChC,IAAD,EAAOiD,KAAK,CAACQ,KAAb;UAAhC,CAAP;QACD;QAED,OAAO;UAAE7B,IAAA,EAAAA;QAAF,CAAP;MACD,CAND,CAD4B,EAQ5BpB,aAR4B,CAA9B;IAUD;IAED,OAAOW,SAAP;EACD;EAED,IAAIuC,MAAJ;EACA,IAAIC,OAAJ;EAEA,IAAIrD,MAAM,KAAK,KAAf,EAAsB;IAAA,IAAAsD,oBAAA,GAG6BC,mBAAmB,CAClE9C,SADkE,EAElEmB,OAAO,CAACV,GAAR,CAAa,UAAA+B,CAAD;QAAA,OAAAO,aAAA,CAAAA,aAAA,KACPP,CADe;UAGlBQ,KAAK,EAAER,CAAC,CAACQ,KAAF,GAAU,IAAIC,MAAJ,CAAWT,CAAC,CAACQ,KAAF,CAAQE,MAAR,GAAiB,GAA5B,CAAV,GAA6C9C;QAAA;MAAA,CAHtD,CAFkE,CAApE;MAAQiC,UAAF,GAAAQ,oBAAA,CAAER,UAAF;MAAcc,SAAd,GAAAN,oBAAA,CAAcM,SAAd;MAAyBC,aAAA,GAAAP,oBAAA,CAAAO,aAAA;IAS/B,IAAIf,UAAU,KAAKjC,SAAnB,EAA8B;MAE5BJ,SAAS,GAAGoD,aAAZ;MACAR,OAAO,GAAG1B,uBAAuB,CAC/BmC,kBAAkB,CAAClC,OAAD,EAAUkB,UAAV,EAAsBc,SAAtB,CADa,EAE/B1D,aAF+B,CAAjC;MAIAkD,MAAM,GAAGC,OAAT;IACD;EACF,CArBD,MAqBO;IAGL,OAAO5C,SAAP,EAAkB;MAAA,IAAAsD,qBAAA,GAC+BR,mBAAmB,CAChE9C,SADgE,EAEhEmB,OAFgE,CAAlE;QAAMkB,WAAF,GAAAiB,qBAAA,CAAEjB,UAAF;QAAcc,UAAd,GAAAG,qBAAA,CAAcH,SAAd;QAAyBC,cAAA,GAAAE,qBAAA,CAAAF,aAAA;MAK7BpD,SAAS,GAAGoD,cAAZ;MAGA,IAAIf,WAAU,KAAKjC,SAAnB,EAA8B;QAC5B,IAAMmD,QAAQ,GAAGvD,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAAjB;QAEA+B,WAAU,GAAG,CAACvB,kBAAkB,CAACyC,QAAQ,CAAC,CAAD,CAAT,CAAnB,CAAb;QACAA,QAAQ,CAACC,KAAT;QACAxD,SAAS,GAAGuD,QAAQ,CAACE,IAAT,CAAc,GAAd,CAAZ;MACD;MAED,IAAMC,KAAK,GAAGxC,uBAAuB,CACnCmC,kBAAkB,CAAClC,OAAD,EAAUkB,WAAV,EAAsBc,UAAtB,CADiB,EAEnC1D,aAFmC,CAArC;MAKA,IAAImD,OAAJ,EAAa;QAAA,IAAAe,SAAA;QAEX,QAAAC,QAAA,GAAOhB,OAAP,cAAAgB,QAAA,uBAAOA,QAAA,CAASvD,MAAT,CAAgBuC,OAAO,CAACiB,KAAR,IAAiB,CAAjC,EAAoCH,KAA3C,EAAkD;UAAA,IAAAE,QAAA;UAChDhB,OAAO,GAAGA,OAAO,CAACvC,MAAR,CAAeuC,OAAO,CAACiB,KAAR,IAAiB,CAAhC,EAAmCH,KAA7C;QACD;QAEAd,OAAD,CAA2CvC,MAA3C,CACE,EAAAsD,SAAA,GAAAf,OAAO,UAAP,IAAAe,SAAA,uBAAAA,SAAA,CAASE,KAAT,KAAkB,CADpB,EAEEH,KAFF,GAEUA,KAFV;MAGD,CATD,MASO;QACLf,MAAM,GAAGe,KAAT;MACD;MAEDd,OAAO,GAAGc,KAAV;IACD;EACF;EAED,IAAId,OAAO,IAAI,IAAX,IAAmBD,MAAM,IAAI,IAAjC,EAAuC;IACrC,OAAOvC,SAAP;EACD;EAED,IAAM0D,KAAK,GAAGC,gBAAgB,CAACnB,OAAD,CAA9B;EACA,IAAM5B,MAAM,GAAGC,gBAAgB,CAC7BhC,IAD6B,EAE7B+E,uBAAuB,CAACF,KAAK,CAACjD,IAAP,EAAaM,OAAb,CAFM,CAA/B;EAKA,IAAIH,MAAJ,EAAY;IAEV8C,KAAK,CAAC9C,MAAN,GAAA+B,aAAA,CAAAA,aAAA,KAAoBe,KAAK,CAAC9C,MAAX,GAAsBA,MAAA,CAArC;EACD;EAED,OAAO2B,MAAP;AACD;AAED,IAAMsB,SAAS,GAAG,SAAZA,SAASA,CAAA;EAAA,IAAAC,KAAA;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAArD,MAAA,EAAOsD,KAAJ,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;IAAIF,KAAJ,CAAAE,IAAA,IAAAH,SAAA,CAAAG,IAAA;EAAA;EAAA,OACf,CAAAL,KAAA,KAAD,EACG/D,MADH,CAAAiB,KAAA,CAAA8C,KAAA,EAAA7C,kBAAA,CACagD,KAAK,CAAC5D,GAAN,CAAW,UAAA+D,CAAD;IAAA,OAAOA,CAAC,CAAClE,KAAF,CAAQ,GAAR,CAAjB;EAAA,EADb,GAEGC,MAFH,CAEUC,OAFV,EAGGiD,IAHH,CAGQ,GAHR,CADF;AAAA;AAMA,IAAMX,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAI9C,SAAD,EAAoBmB,OAApB,EAA+C;EACzE,IAAIkB,UAAJ;EACA,IAAIc,SAAJ;EACA,IAAIC,aAAa,GAAGpD,SAApB;EAHyE,IAAAyE,KAAA,YAAAA,MAM9DrC,MAAX;IACE,IAAI,CAACA,MAAM,CAACY,KAAZ,EAAmB;MACjB;IACD;IAED,IAAMd,KAAK,GAAGkB,aAAa,CAAClB,KAAd,CAAoBE,MAAM,CAACY,KAA3B,CAAd;IAGA,IAAId,KAAJ,EAAW;MACTG,UAAU,GAAAhB,kBAAA,CAAOe,MAAM,CAACC,UAAX,CAAb;MAEA,IAAMqC,aAAa,GAAGtC,MAAM,CAACT,OAAP,CACnBrB,KADmB,CACb,GADa,EAEnBC,MAFmB,CAEX,UAAAiE,CAAD;QAAA,OAAOA,CAAC,CAAC5C,UAAF,CAAa,GAAb,CAFK;MAAA,EAAtB;MAIA,IAAI8C,aAAa,CAAC3D,MAAlB,EAA0B;QACxBoC,SAAS,GAAGuB,aAAa,CAACC,MAAd,CAA0C,UAACC,GAAD,EAAMJ,CAAN,EAAS7D,CAAT,EAAe;UACnE,IAAMkE,KAAK,GAAG3C,KAAK,CAAE,CAACvB,CAAC,GAAG,CAAL,IAAU,CAAZ,CAAL,CAAoBV,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAd;UAEA2E,GAAG,CAACJ,CAAD,CAAH,GAASK,KAAT;UAEA,OAAOD,GAAP;QACD,CANW,EAMT,EANS,CAAZ;MAOD;MAEDxB,aAAa,GAAGA,aAAa,CAACnD,OAAd,CAAsBiC,KAAK,CAAC,CAAD,CAA3B,EAAgC,EAAhC,CAAhB;MAEA;IACD;EAAA;EA5BH,SAAA4C,SAAA,GAAAC,+BAAA,CAAqB5D,OAArB,GAAA6D,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAA8B;IAAA,IAAnB7C,MAAX,GAAA4C,KAAA,CAAAH,KAAA;IAAA,IAAAK,IAAA,GAAAT,KAAA,CAAWrC,MAAX;IAAA,IAAA8C,IAAA,iBAEI;IAAA,IAAAA,IAAA,cAyBA;EAEH;EAED,OAAO;IAAE7C,UAAF,EAAEA,UAAF;IAAcc,SAAd,EAAcA,SAAd;IAAyBC,aAAA,EAAAA;EAAzB,CAAP;AACD,CAtCD;AAwCA,IAAM7B,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAC3BhC,MAD8B,EAE9BkD,MAF8B,EAG9B0C,WAH8B,EAOZ;EAAA,IAHlB9C,UAAoB,GAAA+B,SAAA,CAAArD,MAAA,QAAAqD,SAAA,QAAAhE,SAAA,GAAAgE,SAAA,MAAG,EAJO;EAAA,IAK9BgB,QAL8B,GAAAhB,SAAA,CAAArD,MAAA,OAAAqD,SAAA,MAAAhE,SAAA;EAAA,IAM9BiF,aAN8B,GAAAjB,SAAA,CAAArD,MAAA,OAAAqD,SAAA,MAAAhE,SAAA;EAQ9B,IAAMe,OAAsB,GAAG,EAA/B;EAEAkB,UAAU,CAAC1C,IAAX,CAAgB8C,MAAhB;EAEA,IAAML,MAAM,GAAG+C,WAAW,CAAC1C,MAAD,CAA1B;EAEA,IAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;IAE9B,IAAMT,OAAO,GAAG0D,aAAa,GAAGpB,SAAS,CAACoB,aAAD,EAAgBjD,MAAhB,CAAZ,GAAsCA,MAAnE;IAEAjB,OAAO,CAACxB,IAAR,CAAa2F,gBAAgB,CAAC/F,MAAD,EAASkD,MAAT,EAAiBJ,UAAjB,EAA6BV,OAA7B,EAAsCS,MAAtC,CAA7B;EACD,CALD,MAKO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IACrC,IAAIT,SAAJ;IAKA,IAAI,OAAOS,MAAM,CAACnD,IAAd,KAAuB,QAA3B,EAAqC;MACnC,IAAIM,MAAJ,EAAY;QACVoC,SAAO,GACLS,MAAM,CAACmD,KAAP,KAAiB,IAAjB,IAAyBF,aAAzB,GACIpB,SAAS,CAACoB,aAAD,EAAgBjD,MAAM,CAACnD,IAAvB,CADb,GAEImD,MAAM,CAACnD,IAHb;MAID,CALD,MAKO;QACL,IAAImD,MAAM,CAACmD,KAAP,IAAgBnD,MAAM,CAACnD,IAAP,KAAgBmB,SAApC,EAA+C;UAC7C,MAAM,IAAIoF,KAAJ,CACJ,sJADI,CAAN;QAGD;QAED7D,SAAO,GACLS,MAAM,CAACmD,KAAP,KAAiB,IAAjB,GACItB,SAAS,CAACoB,aAAa,IAAI,EAAlB,EAAsBjD,MAAM,CAACnD,IAAP,IAAe,EAArC,CADb,GAEImD,MAAM,CAACnD,IAAP,IAAe,EAHrB;MAID;MAEDkC,OAAO,CAACxB,IAAR,CACE2F,gBAAgB,CACd/F,MADc,EAEdkD,MAFc,EAGdJ,UAHc,EAIdV,SAJc,EAKdS,MAAM,CAACnD,IALO,EAMdmD,MAAM,CAACM,KANO,CADlB;IAUD;IAED,IAAIN,MAAM,CAACrC,OAAX,EAAoB;MAElB,IAAIqC,MAAM,CAAC1C,gBAAX,EAA6B;QAC3B0F,QAAQ,CAACzF,IAAT,CAAc;UACZD,gBAAgB,EAAE0C,MAAM,CAAC1C,gBADb;UAEZE,eAAe,EAAEC,MAAM,CAACC,IAAP,CAAYsC,MAAM,CAACrC,OAAnB;QAFL,CAAd;MAID;MAEDF,MAAM,CAACC,IAAP,CAAYsC,MAAM,CAACrC,OAAnB,EAA4B0F,OAA5B,CAAqC,UAAAC,YAAD,EAAkB;QAAA,IAAAC,QAAA;QACpD,IAAMhD,MAAM,GAAGpB,uBAAuB,CACpChC,MADoC,EAEpCmG,YAFoC,EAGpCtD,MAAM,CAACrC,OAH6B,EAIpCsC,UAJoC,EAKpC+C,QALoC,GAAAO,QAAA,GAMpChE,SANoC,cAAAgE,QAAA,cAAAA,QAAA,GAMzBN,aANyB,CAAtC;QASAlE,OAAO,CAACxB,IAAR,CAAAyB,KAAA,CAAAD,OAAO,EAAAE,kBAAA,CAASsB,MAAhB;MACD,CAXD;IAYD;EACF;EAEDN,UAAU,CAACuD,GAAX;EAEA,OAAOzE,OAAP;AACD,CAnFD;AAqFA,IAAMmE,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpB/F,MADuB,EAEvBkD,MAFuB,EAGvBJ,UAHuB,EAIvBV,OAJuB,EAKvB1C,IALuB,EAMvByD,KANuB,EAOP;EAEhBf,OAAO,GAAGA,OAAO,CAACrB,KAAR,CAAc,GAAd,EAAmBC,MAAnB,CAA0BC,OAA1B,EAAmCiD,IAAnC,CAAwC,GAAxC,CAAV;EAEA,IAAMT,KAAK,GAAGrB,OAAO,GACjB,IAAIsB,MAAJ,MAAA9C,MAAA,CACOwB,OAAO,CACTrB,KADE,CACI,GADJ,EAEFG,GAFE,CAEG,UAAAoF,EAAD,EAAQ;IACX,IAAItG,MAAM,IAAIsG,EAAE,KAAK,GAArB,EAA0B;MACxB,MAAM,IAAIL,KAAJ,CACJ,gJADI,CAAN;IAGD;IAED,IAAIK,EAAE,CAACjE,UAAH,CAAc,GAAd,CAAJ,EAAwB;MACtB,qBAAAzB,MAAA,CAAqB0F,EAAE,CAAC3F,QAAH,CAAY,GAAZ,IAAmB,GAAnB,GAAyB,EAA9C;IACD;IAED,UAAAC,MAAA,CAAU0F,EAAE,KAAK,GAAP,GAAa,IAAb,GAAoBhH,MAAM,CAACgH,EAAD,CAApC;EACD,CAdE,EAeFpC,IAfE,CAeG,EAfH,CADP,OADiB,GAmBjBrD,SAnBJ;EAqBA,OAAO;IACLqC,MADK,EACLA,MADK;IAELO,KAFK,EAELA,KAFK;IAGLrB,OAHK,EAGLA,OAHK;IAIL1C,IAJK,EAILA,IAJK;IAMLoD,UAAU,EAAAhB,kBAAA,CAAMgB,UAAJ,CANP;IAOLK,KAAA,EAAAA;EAPK,CAAP;AASD,CAzCD;AA2CA,IAAMsB,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAC3B8B,SAD8B,EAE9BC,UAF8B,EAGF;EAC5B,SAAAC,UAAA,GAAAjB,+BAAA,CAAqBgB,UAArB,GAAAE,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAf,IAAA,GAAiC;IAAA,IAAtB7C,MAAX,GAAA6D,MAAA,CAAApB,KAAA;IACE,IAAIiB,SAAS,KAAK1D,MAAM,CAACC,UAAP,CAAkBD,MAAM,CAACC,UAAP,CAAkBtB,MAAlB,GAA2B,CAA7C,CAAlB,EAAmE;MACjE,OAAOqB,MAAM,CAACM,KAAd;IACD;EACF;EAED,OAAOtC,SAAP;AACD,CAXD;AAcA,IAAM8F,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBJ,SADuB,EAEvBrG,aAFuB,EAGA;EACvB,SAAA0G,UAAA,GAAApB,+BAAA,CAAqBtF,aAArB,GAAA2G,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAlB,IAAA,GAAoC;IAAA,IAAzB7C,MAAX,GAAAgE,MAAA,CAAAvB,KAAA;IACE,IAAIzC,MAAM,CAACxC,eAAP,CAAuByG,QAAvB,CAAgCP,SAAhC,CAAJ,EAAgD;MAC9C,OAAO1D,MAAM,CAAC1C,gBAAP,KAA4BoG,SAA5B,GACH1F,SADG,GAEHgC,MAAM,CAAC1C,gBAFX;IAGD;EACF;EACD,OAAOU,SAAP;AACD,CAZD;AAgBA,IAAMkG,iBAAiB,GAAG,SAApBA,iBAAiBA,CACrBC,YADwB,EAExBT,SAFwB,EAGxB9E,MAHwB,EAIxBwF,OAJwB,EAKP;EACjB,IAAIA,OAAJ,EAAa;IACX,IAAID,YAAJ,EAAkB;MAChB,OAAO;QACL1C,KAAK,EAAE,CADF;QAELxD,MAAM,EAAE,CAAC;UAAEQ,IAAI,EAAE0F;QAAR,CAAD,EAAyB;UAAE1F,IAAI,EAAEiF,SAAR;UAA6B9E,MAAA,EAAAA;QAA7B,CAAzB;MAFH,CAAP;IAID,CALD,MAKO;MACL,OAAO;QACLX,MAAM,EAAE,CAAC;UAAEQ,IAAI,EAAEiF,SAAR;UAA6B9E,MAAA,EAAAA;QAA7B,CAAD;MADH,CAAP;IAGD;EACF,CAXD,MAWO;IACL,IAAIuF,YAAJ,EAAkB;MAChB,OAAO;QACL1C,KAAK,EAAE,CADF;QAELxD,MAAM,EAAE,CACN;UAAEQ,IAAI,EAAE0F;QAAR,CADM,EAEN;UAAE1F,IAAI,EAAEiF,SAAR;UAA6B9E,MAA7B,EAA6BA,MAA7B;UAAqC0C,KAAK,EAAE;YAAErD,MAAM,EAAE;UAAV;QAA5C,CAFM;MAFH,CAAP;IAOD,CARD,MAQO;MACL,OAAO;QACLA,MAAM,EAAE,CAAC;UAAEQ,IAAI,EAAEiF,SAAR;UAA6B9E,MAA7B,EAA6BA,MAA7B;UAAqC0C,KAAK,EAAE;YAAErD,MAAM,EAAE;UAAV;QAA5C,CAAD;MADH,CAAP;IAGD;EACF;AACF,CAhCD;AAkCA,IAAMa,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAC3Bb,MAD8B,EAE9BZ,aAF8B,EAG3B;EACH,IAAIiE,KAAJ;EACA,IAAII,KAAK,GAAGzD,MAAM,CAACmD,KAAP,EAAZ;EACA,IAAI+C,YAAY,GAAGL,gBAAgB,CAACpC,KAAK,CAACjD,IAAP,EAAapB,aAAb,CAAnC;EAEAiE,KAAK,GAAG4C,iBAAiB,CACvBC,YADuB,EAEvBzC,KAAK,CAACjD,IAFiB,EAGvBiD,KAAK,CAAC9C,MAHiB,EAIvBX,MAAM,CAACU,MAAP,KAAkB,CAJK,CAAzB;EAOA,IAAIV,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;IACrB,IAAI0F,WAAW,GAAG/C,KAAlB;IAEA,OAAQI,KAAK,GAAGzD,MAAM,CAACmD,KAAP,EAAhB,EAAsE;MACpE+C,YAAY,GAAGL,gBAAgB,CAACpC,KAAK,CAACjD,IAAP,EAAapB,aAAb,CAA/B;MAEA,IAAMiH,gBAAgB,GACpBD,WAAW,CAAC5C,KAAZ,IAAqB4C,WAAW,CAACpG,MAAZ,CAAmBU,MAAnB,GAA4B,CADnD;MAGA0F,WAAW,CAACpG,MAAZ,CAAmBqG,gBAAnB,EAAqChD,KAArC,GAA6C4C,iBAAiB,CAC5DC,YAD4D,EAE5DzC,KAAK,CAACjD,IAFsD,EAG5DiD,KAAK,CAAC9C,MAHsD,EAI5DX,MAAM,CAACU,MAAP,KAAkB,CAJ0C,CAA9D;MAOA,IAAIV,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;QACrB0F,WAAW,GAAGA,WAAW,CAACpG,MAAZ,CAAmBqG,gBAAnB,EACXhD,KADH;MAED;IACF;EACF;EAED,OAAOA,KAAP;AACD,CAvCD;AAyCA,IAAML,kBAAkB,GAAG,SAArBA,kBAAkBA,CACtBlC,OADyB,EAEzBkB,UAFyB,EAGzBc,SAHyB;EAAA,OAKzBd,UAAU,CAAC5B,GAAX,CAAgB,UAAAI,IAAD,EAAU;IACvB,IAAMuB,MAAM,GAAGjB,OAAO,CAACgB,IAAR,CAAc,UAAAK,CAAD;MAAA,OAAOA,CAAC,CAACC,MAAF,KAAa5B,IAAjC;IAAA,EAAf;IAEA,IAAIG,MAAJ;IAEA,IAAImC,SAAS,KAAIf,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEnD,IAAZ,CAAb,EAA+B;MAC7B,IAAM0C,OAAO,GAAGS,MAAM,CAACnD,IAAvB;MAEA,IAAI0C,OAAJ,EAAa;QACX,IAAM+C,aAAa,GAAG/C,OAAO,CAC1BrB,KADmB,CACb,GADa,EAEnBC,MAFmB,CAEX,UAAAiE,CAAD;UAAA,OAAOA,CAAC,CAAC5C,UAAF,CAAa,GAAb,CAFK;QAAA,EAAtB;QAIA,IAAI8C,aAAa,CAAC3D,MAAlB,EAA0B;UACxBC,MAAM,GAAG0D,aAAa,CAACC,MAAd,CAA0C,UAACC,GAAD,EAAMJ,CAAN,EAAY;YAC7D,IAAMlD,GAAG,GAAGkD,CAAC,CAACvE,OAAF,CAAU,IAAV,EAAgB,EAAhB,EAAoBA,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CAAZ;YACA,IAAM4E,KAAK,GAAG1B,SAAS,CAAEqB,CAAF,CAAvB;YAEA,IAAIK,KAAJ,EAAW;cAAA,IAAA8B,aAAA;cACT/B,GAAG,CAACtD,GAAD,CAAH,GAAW,EAAAqF,aAAA,GAAAvE,MAAM,CAACM,KAAP,cAAAiE,aAAA,uBAAAA,aAAA,CAAerF,GAAf,KAAsBc,MAAM,CAACM,KAAP,CAAapB,GAAb,EAAkBuD,KAAlB,CAAtB,GAAiDA,KAA5D;YACD;YAED,OAAOD,GAAP;UACD,CATQ,EASN,EATM,CAAT;QAUD;MACF;IACF;IAED,IAAI5D,MAAM,IAAInB,MAAM,CAACC,IAAP,CAAYkB,MAAZ,EAAoBD,MAAlC,EAA0C;MACxC,OAAO;QAAEF,IAAF,EAAEA,IAAF;QAAQG,MAAA,EAAAA;MAAR,CAAP;IACD;IAED,OAAO;MAAEH,IAAA,EAAAA;IAAF,CAAP;EACD,CAjCD,CALF;AAAA;AAwCA,IAAMkD,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIL,KAAD,EAAyB;EAAA,IAAAkD,SAAA;EAChD,IAAIhE,OAAiC,GAAGc,KAAxC;EAEA,QAAAmD,SAAA,GAAOjE,OAAP,cAAAiE,SAAA,uBAAOA,SAAA,CAASxG,MAAT,CAAgBuC,OAAO,CAACiB,KAAR,IAAiB,CAAjC,EAAoCH,KAA3C,EAAkD;IAAA,IAAAmD,SAAA;IAEhDjE,OAAO,GAAGA,OAAO,CAACvC,MAAR,CAAeuC,OAAO,CAACiB,KAAR,IAAiB,CAAhC,EAAmCH,KAA7C;EACD;EAED,IAAMI,KAAK,GAAIlB,OAAD,CAA2CvC,MAA3C,CACZ,EAAAuG,SAAA,GAAAhE,OAAO,UAAP,IAAAgE,SAAA,uBAAAA,SAAA,CAAS/C,KAAT,KAAkB,CADN,CAAd;EAIA,OAAOC,KAAP;AACD,CAbD;AAeA,IAAM7C,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBhC,IADuB,EAEvB6H,WAFuB,EAGpB;EACH,IAAMC,KAAK,GAAG9H,IAAI,CAACqB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;EACA,IAAMU,MAAM,GAAGlC,WAAW,CAAC4D,KAAZ,CAAkBqE,KAAlB,CAAf;EAEA,IAAID,WAAJ,EAAiB;IACfjH,MAAM,CAACC,IAAP,CAAYkB,MAAZ,EAAoByE,OAApB,CAA6B,UAAA5E,IAAD,EAAU;MACpC,IAAIiG,WAAW,CAACjG,IAAD,CAAX,IAAqB,OAAOG,MAAM,CAACH,IAAD,CAAb,KAAwB,QAAjD,EAA2D;QACzDG,MAAM,CAACH,IAAD,CAAN,GAAeiG,WAAW,CAACjG,IAAD,CAAX,CAAkBG,MAAM,CAACH,IAAD,CAAxB,CAAf;MACD;IACF,CAJD;EAKD;EAED,OAAOhB,MAAM,CAACC,IAAP,CAAYkB,MAAZ,EAAoBD,MAApB,GAA6BC,MAA7B,GAAsCZ,SAA7C;AACD,CAhBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}